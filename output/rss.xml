<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gopinath A R</title><link>https://g-ar.github.io/</link><description>Some random stuffs -- Programming and Mathematics</description><atom:link rel="self" type="application/rss+xml" href="https://g-ar.github.io/rss.xml"></atom:link><language>en</language><lastBuildDate>Sat, 14 Aug 2021 13:06:16 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Solving a Puzzle Using Picat</title><link>https://g-ar.github.io/posts/solving-a-puzzle-using-picat/</link><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;Arrange the numbers 1-32, inclusive, in a circle such that the sum of any two adjacent numbers in the circular chain is a perfect square&lt;/em&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Picat is a programming language for solving constraint problems, logic problems etc.&lt;/div&gt;
&lt;div class="line"&gt;It's quite fast too compared to python z3 solver.&lt;/div&gt;
&lt;div class="line"&gt;So, here's one way to solve the circle problem in picat&lt;/div&gt;
&lt;/div&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-17"&gt;17&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-18"&gt;18&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-19"&gt;19&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-20"&gt;20&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-21"&gt;21&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-22"&gt;22&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-23"&gt;23&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-24"&gt;24&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-25"&gt;25&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-26"&gt;26&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-a-puzzle-using-picat/#rest_code_9a80909427b4458e8ec7cd732e44e5b3-27"&gt;27&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-1"&gt;&lt;/a&gt;main =&amp;gt; go.
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-3"&gt;&lt;/a&gt;go =&amp;gt;
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-5"&gt;&lt;/a&gt;   % decision variables
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-6"&gt;&lt;/a&gt;   N = 32,
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-7"&gt;&lt;/a&gt;   Xs = new_list(N),
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-9"&gt;&lt;/a&gt;   % given constraints
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-10"&gt;&lt;/a&gt;   Xs :: 1..N,
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-11"&gt;&lt;/a&gt;   Sq = [I**2 : I in 2..7],
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-13"&gt;&lt;/a&gt;   % fix one number, to avoid rotation
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-14"&gt;&lt;/a&gt;   Xs[1] #= 1,
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-15"&gt;&lt;/a&gt;   foreach (I in 1..N-1),
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-16"&gt;&lt;/a&gt;       sum([(Xs[I+1]+Xs[I]) #= Sq[J] : J in 1..Sq.length]) #= 1,
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-17"&gt;&lt;/a&gt;   end,
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-18"&gt;&lt;/a&gt;   sum([(Xs[N]+Xs[1]) #= Sq[J] : J in 1..Sq.length]) #= 1,
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-19"&gt;&lt;/a&gt;   all_different(Xs),
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-21"&gt;&lt;/a&gt;   % solve and print
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-22"&gt;&lt;/a&gt;   Res = solve_all(Xs),
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-24"&gt;&lt;/a&gt;   foreach (R in Res),
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-25"&gt;&lt;/a&gt;      println(R),
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-26"&gt;&lt;/a&gt;   end,
&lt;a name="rest_code_9a80909427b4458e8ec7cd732e44e5b3-27"&gt;&lt;/a&gt;   nl.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;References:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://picat-lang.org/download.html"&gt;Picat Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.hakank.org/picat/"&gt;HakanK's page on Picat&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>CP</category><category>Picat</category><category>puzzle</category><category>SAT</category><guid>https://g-ar.github.io/posts/solving-a-puzzle-using-picat/</guid><pubDate>Sat, 14 Aug 2021 13:00:30 GMT</pubDate></item><item><title>Solving Mastermind-like Problems Using Z3 Theorem Prover</title><link>https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/</link><description>&lt;div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;4 7 2 9 1 - One number is correct but not in right position&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;9 4 6 8 7 - One number is correct but not in right position&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;3 1 8 7 2 - Two numbers are correct but only one is in right position&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;1 5 7 3 9 - Two numbers are correct and both in right position&lt;/em&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Assuming all the digits are distinct, what is the 5-digit number?&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;(Asked on &lt;a class="reference external" href="https://puzzling.stackexchange.com/questions/97032/5-digit-puzzle-code-looking-for-solution"&gt;puzzling stackexchange&lt;/a&gt;)&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This can be quite easily solved using Z3 theorem prover, once we figure out to set up the constraints.&lt;/p&gt;
&lt;p&gt;We have 5 variables, &lt;span class="math"&gt;\(\{x_i\}, i=0, 1, 2, 3, 4\)&lt;/span&gt;
which are constrained by&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle
0 \le x_i &amp;amp;\le 9 \\
x_i \neq x_j \land i &amp;amp;\neq j\\
[x_0 \neq 4] + [x_1 \neq 7] + [x_2 \neq 2] + [x_3 \neq 9] + [x_4 \neq 1] &amp;amp;= 5\\
[x_0 \neq 9] + [x_1 \neq 4] + [x_2 \neq 6] + [x_3 \neq 8] + [x_4 \neq 7] &amp;amp;= 5\\
[x_0 \neq 3] + [x_1 \neq 1] + [x_2 \neq 8] + [x_3 \neq 7] + [x_4 \neq 2] &amp;amp;= 4\\
[x_0 \neq 1] + [x_1 \neq 5] + [x_2 \neq 7] + [x_3 \neq 3] + [x_4 \neq 9] &amp;amp;= 3\\
\end{align*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\([\cdot]\)&lt;/span&gt; is the Iverson Bracket notation (1 if the condition holds, 0 otherwise).&lt;/p&gt;
&lt;p&gt;When checking the models for which the conditions are satisfied, we will also check that the number of digits satisfying the conditions holds good, using set intersection.&lt;/p&gt;
&lt;p&gt;We solve it using python bindings to Z3, which can be installed in python virtual environment by&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_a53af38f44f34f5cb587f4e45aeba0cc-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_a53af38f44f34f5cb587f4e45aeba0cc-1"&gt;&lt;/a&gt;pip install z3-solver
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Then, we can solve the above by running the following python code:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-17"&gt;17&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-18"&gt;18&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-19"&gt;19&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-20"&gt;20&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-21"&gt;21&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-22"&gt;22&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-23"&gt;23&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-24"&gt;24&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-25"&gt;25&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-26"&gt;26&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-27"&gt;27&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-28"&gt;28&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-29"&gt;29&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-30"&gt;30&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-31"&gt;31&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-32"&gt;32&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-33"&gt;33&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-34"&gt;34&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-35"&gt;35&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-36"&gt;36&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-37"&gt;37&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-38"&gt;38&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-39"&gt;39&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-40"&gt;40&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-41"&gt;41&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-42"&gt;42&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-43"&gt;43&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-44"&gt;44&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-45"&gt;45&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-46"&gt;46&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-47"&gt;47&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-48"&gt;48&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-49"&gt;49&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-50"&gt;50&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-51"&gt;51&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-52"&gt;52&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_5467346168334f5fa9638b7939402791-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;z3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Solver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-8"&gt;&lt;/a&gt;         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-9"&gt;&lt;/a&gt;         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-10"&gt;&lt;/a&gt;         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# variables&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x[&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# constraints&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-16"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-17"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    All are distinct&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-18"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    '''&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-21"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-22"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    All numbers 0 &amp;lt;= x_i &amp;lt;= 9&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-23"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    '''&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-25"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-27"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# no number in correct position&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-28"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# no number in correct position&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-29"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# one number in correct position&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-30"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# two numbers in correct position&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-32"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-34"&gt;&lt;/a&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;sat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-35"&gt;&lt;/a&gt;        &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-36"&gt;&lt;/a&gt;        &lt;span class="n"&gt;xval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_long&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-37"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;\
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-38"&gt;&lt;/a&gt;           &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;\
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-39"&gt;&lt;/a&gt;           &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;\
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-40"&gt;&lt;/a&gt;           &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-41"&gt;&lt;/a&gt;            &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-42"&gt;&lt;/a&gt;            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-43"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Or&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_long&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt; &lt;span class="c1"&gt;# add constraint to check for different solution&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-44"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-45"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#solutions: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-46"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-47"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-48"&gt;&lt;/a&gt;    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-49"&gt;&lt;/a&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-50"&gt;&lt;/a&gt;&lt;span class="sd"&gt;[6, 5, 0, 3, 2]&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-51"&gt;&lt;/a&gt;&lt;span class="sd"&gt;#solutions:  1&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-52"&gt;&lt;/a&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;If we remove the &lt;tt class="docutils literal"&gt;distinct&lt;/tt&gt; constraint, we get 19 different solutions.&lt;/p&gt;
&lt;p&gt;We find that Z3 and other SMT solvers are powerful tools for verification computer programs / hardware designs, perform compiler optimizations, finding bugs etc. And solving Logic puzzles!&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Z3_Theorem_Prover"&gt;Z3 Theorem Prover wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.hakank.org/z3/"&gt;HakanK's page on Z3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm"&gt;A guide to Z3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>mastermind</category><category>mathjax</category><category>numbermind</category><category>puzzle</category><category>SAT</category><category>SMT</category><category>Z3</category><guid>https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/</guid><pubDate>Mon, 27 Apr 2020 17:52:20 GMT</pubDate></item><item><title>A puzzle from New Scientist</title><link>https://g-ar.github.io/posts/a-puzzle-from-new-scientist/</link><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;It is Tom's 7th birthday and he has a cake with seven candles on it, arranged in a circle -- but they are trick candles. If you blow on a lit candle, it will go out, but if you blow on an unlit candle, it will relight itself.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Since Tom is only 7, his aim isn't brilliant. Any time he blows on a particular candle, the two either side also get blown on as well. How can Tom blow out all the candles? What is the fewest number of puffs he can do it in?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a nice candidate for the shortest path problem, which can be easily solved in Sagemath as follows:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-17"&gt;17&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-18"&gt;18&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-19"&gt;19&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-20"&gt;20&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-21"&gt;21&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-22"&gt;22&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-23"&gt;23&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/a-puzzle-from-new-scientist/#rest_code_1a42a393c35d4286a3706b9f7306d1bd-24"&gt;24&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-3"&gt;&lt;/a&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;Build an adjacency matrix, where three consecutive bits of the adjacent nodes are toggled&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;^^&lt;/span&gt;&lt;span class="mb"&gt;0b111&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;^^&lt;/span&gt;&lt;span class="mb"&gt;0b1110&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;^^&lt;/span&gt;&lt;span class="mb"&gt;0b11100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;^^&lt;/span&gt;&lt;span class="mb"&gt;0b111000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;^^&lt;/span&gt;&lt;span class="mb"&gt;0b1110000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;^^&lt;/span&gt;&lt;span class="mb"&gt;0b1100001&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;^^&lt;/span&gt;&lt;span class="mb"&gt;0b1000011&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-15"&gt;&lt;/a&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-16"&gt;&lt;/a&gt;&lt;span class="sd"&gt;Find the shortest path, from all-lit candles to none&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-17"&gt;&lt;/a&gt;&lt;span class="sd"&gt;Display the seven candles in binary&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-18"&gt;&lt;/a&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-19"&gt;&lt;/a&gt;&lt;span class="n"&gt;mx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-20"&gt;&lt;/a&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DiGraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-21"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortest_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-22"&gt;&lt;/a&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-23"&gt;&lt;/a&gt;&lt;span class="sd"&gt;['1111111', '1110001', '0010000', '1100000', '0100011', '0011011', '0000111', '0000000']&lt;/span&gt;
&lt;a name="rest_code_1a42a393c35d4286a3706b9f7306d1bd-24"&gt;&lt;/a&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</description><category>puzzle</category><category>sage</category><guid>https://g-ar.github.io/posts/a-puzzle-from-new-scientist/</guid><pubDate>Fri, 10 Apr 2020 16:55:50 GMT</pubDate></item><item><title>Interactive Disassembly</title><link>https://g-ar.github.io/posts/interactive-disassembly/</link><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="https://godbolt.org/"&gt;Godbolt&lt;/a&gt; enables us to interactively see the assembly output of the input source code by the selected compiler.&lt;/p&gt;
&lt;p&gt;But it depends on nodejs and there's quite a delay between the modified input and the produced disassembly.&lt;/p&gt;
&lt;p&gt;Enter &lt;a class="reference external" href="https://gitlab.com/jgkamat/rmsbolt"&gt;RMSBolt&lt;/a&gt;, which is a package for emacs. It's much lighter, more powerful, and more interactive when compared to Godbolt, and perhaps the only alternative to Godbolt. Great way to learn assembly language, and fun too!&lt;/p&gt;
&lt;img alt="../../images/rmsbolt.gif" src="https://g-ar.github.io/images/rmsbolt.gif"&gt;&lt;/div&gt;</description><category>emacs</category><category>GCC</category><category>godbolt</category><category>rmsbolt</category><guid>https://g-ar.github.io/posts/interactive-disassembly/</guid><pubDate>Sun, 28 Oct 2018 15:36:08 GMT</pubDate></item><item><title>Interactive Regexp and Replacing Regexp with Emacs</title><link>https://g-ar.github.io/posts/interactive-regexp-and-replacing-regexp-with-emacs/</link><description>&lt;div&gt;&lt;p&gt;If we need to replace text based on patterns, then &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;replace-regexp&lt;/span&gt;&lt;/tt&gt; is the command.&lt;/p&gt;
&lt;p&gt;But we may not always be sure that the regular expression (RE) entered does what we wanted. Not to worry, emacs has it covered: with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;re-builder&lt;/span&gt;&lt;/tt&gt;! As we keep entering the text, the editor progressively highlights the text in the buffer that matches. Once we are certain that all the required text has matched, we can move to enter the command to replace it.&lt;/p&gt;
&lt;p&gt;We'll look at a usecase where we need to uppercase some sql keywords, and cast the output of a function as float&lt;/p&gt;
&lt;blockquote&gt;
&lt;script src="https://asciinema.org/a/L6opRuaNH22ZbzdxHmlbDDRoR.js" id="asciicast-L6opRuaNH22ZbzdxHmlbDDRoR" async data-autoplay="true" data-speed="2" width="800"&gt;&lt;/script&gt;&lt;/blockquote&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;replace-regexp&lt;/span&gt;&lt;/tt&gt;, the matched expressions are grouped using &lt;tt class="docutils literal"&gt;\(&lt;/tt&gt; ... &lt;tt class="docutils literal"&gt;\)&lt;/tt&gt;, and the matched groups can be accessed in the result as &lt;tt class="docutils literal"&gt;\1&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;\2&lt;/tt&gt;, etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;script src="https://asciinema.org/a/FPnVQNSBV0obVx2jgyDUJjchd.js" id="asciicast-FPnVQNSBV0obVx2jgyDUJjchd" async data-speed="2" width="800"&gt;&lt;/script&gt;&lt;/blockquote&gt;&lt;/div&gt;</description><category>emacs</category><category>regular expression</category><guid>https://g-ar.github.io/posts/interactive-regexp-and-replacing-regexp-with-emacs/</guid><pubDate>Sun, 25 Feb 2018 09:33:57 GMT</pubDate></item><item><title>Context Free Grammars And Generating Functions</title><link>https://g-ar.github.io/posts/context-free-grammars-and-generating-functions/</link><description>&lt;div&gt;&lt;p&gt;We saw how to get the number of ways to generate a string of length n, matching or avoiding certain patterns, from Regular Expressions (RE).&lt;/p&gt;
&lt;p&gt;But it can't help when more expressive power is required. We'll see examples on how to use Context Free Grammars (CFG) to obtain the generating functions (GF), whose coefficients in the formal power series indicate the number of parse trees possible for n-letter string for the given CFG.&lt;/p&gt;
&lt;p&gt;So, in a way, it can be used to know whether the grammar is ambiguous or not.&lt;/p&gt;
&lt;p&gt;Let's look at relatively simple examples, for the strings constructed over the set of symbols &lt;span class="math"&gt;\(\left\{\left(, \right)\right\}\)&lt;/span&gt;&lt;/p&gt;
&lt;font size="+1"&gt;1. Find the number of ways of constructing balanced parentheses&lt;/font&gt;&lt;p&gt;The grammar is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
S \to (S)S\; \big| \; \epsilon
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Then, to get its GF, replace each symbol with &lt;span class="math"&gt;\(x\)&lt;/span&gt;, and &lt;span class="math"&gt;\(\epsilon\)&lt;/span&gt; with 1. Hence, the GF for the RE is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
S(x) &amp;amp;= x^2\, S(x)^2 + 1\\
\implies S(x)&amp;amp;= \frac{1-\sqrt{1-4 x^2}}{2 x^2}\\
&amp;amp;= \sum_{n\ge 0} \frac{1}{n+1}\binom{2\, n}{n} x^{2 n}
\end{align*}
&lt;/div&gt;
&lt;p&gt;and the series is the well known Catalan numbers.&lt;/p&gt;
&lt;font size="+1"&gt;2. Find the number of ways of constructing balanced parentheses, which can have more opening parentheses&lt;/font&gt;&lt;p&gt;e.g. for &lt;span class="math"&gt;\(n=3\)&lt;/span&gt;, &lt;span class="math"&gt;\((((, ((), ()(\)&lt;/span&gt; are valid&lt;/p&gt;
&lt;p&gt;We may obtain the CFG as&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
S \to (S)S \; \big|\; (S \; \big| \; \epsilon
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Even though the grammar describes the language, it's actually ambiguous, and the GF obtained from this counts all the extra parse trees.&lt;/p&gt;
&lt;p&gt;The right CFG is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
S &amp;amp;\to B \;\big|\; U \\
  B &amp;amp;\to (\, B\, )\, B\; \big|\; \epsilon \\
  U &amp;amp;\to (\,  S \;\big| \;(\, B\, )\, U \\
\end{align*}
&lt;/div&gt;
&lt;p&gt;and we derive the GF&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
S(x) &amp;amp;= B(x) + U(x)\\
  B(x) &amp;amp;= B(x)^2 x^2  + 1\\
  U(x) &amp;amp;= S(x) x + B(x) U(x) x^2\\
  \implies S(x) &amp;amp;= \frac{-1+2\,x+\sqrt{1-4\,x^2}}{2\,x-4\,x^2}\\
  &amp;amp;= \sum_{n\ge 0} \binom{n}{\lfloor n/2 \rfloor} x^{n}
\end{align*}
&lt;/div&gt;
&lt;p&gt;Read &lt;a class="reference external" href="https://arxiv.org/abs/1204.4982"&gt;Gruber, Lee &amp;amp; Shallit&lt;/a&gt; for the theory.&lt;/p&gt;&lt;/div&gt;</description><category>context free grammar</category><category>generating function</category><category>mathjax</category><guid>https://g-ar.github.io/posts/context-free-grammars-and-generating-functions/</guid><pubDate>Sat, 27 Jan 2018 09:13:04 GMT</pubDate></item><item><title>Regular Expressions And Generating Functions</title><link>https://g-ar.github.io/posts/regular-expressions-and-generating-functions/</link><description>&lt;div&gt;&lt;p&gt;We'll discuss about the number of ways to generate a string of length n, matching or avoiding certain patterns as its substring.&lt;/p&gt;
&lt;p&gt;This can be easily achieved deriving an unambiguous regular expression (RE) by constructing a minimal Deterministic Finite Automaton (DFA), and then the ordinary Generating Function (GF) whose coefficients are the number of n-letter strings having the pattern.&lt;/p&gt;
&lt;p&gt;Let's look at a few examples, for the strings constructed over the set of symbols &lt;span class="math"&gt;\(\{0, 1\}\)&lt;/span&gt; such that&lt;/p&gt;
&lt;font size="+1"&gt;1. There are no two consecutive 1's&lt;/font&gt;&lt;p&gt;The RE is: &lt;span class="math"&gt;\((0+10)^*(1+\epsilon)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Then, to get its GF, replace each symbol with &lt;span class="math"&gt;\(x\)&lt;/span&gt;, and &lt;span class="math"&gt;\(\epsilon\)&lt;/span&gt; with 1. Hence, the GF for the RE is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
G_1(x) &amp;amp;= \frac{1}{1-x-x^2}\cdot (1+x)\\
&amp;amp;= \sum_{n\ge 0} \frac{ \left(\left(\sqrt{5}-3\right)
   \left(1-\sqrt{5}\right)^n+\left(\sqrt{5}+3\right)
   \left(1+\sqrt{5}\right)^n\right)}{\sqrt{5}\, 2^{n+1}} x^n\\
&amp;amp;= \sum_{n\ge 0} F_{n+2} x^n
\end{align*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(F_{n}\)&lt;/span&gt; is the fibonacci number&lt;/p&gt;
&lt;font size="+1"&gt;2. At least one pair of consecutive 1's as its substring&lt;/font&gt;&lt;p&gt;RE: &lt;span class="math"&gt;\((0+10)^*11(0+1)^*\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
G_2(x) &amp;amp;= \frac{1}{1-x-x^2} \cdot x^2\cdot \frac{1}{1-2\, x}\\
&amp;amp;= \sum_{n\ge 0} \left(\frac{ \left(\left(\sqrt{5}-3\right)
   \left(-\left(1-\sqrt{5}\right)^n\right)-\left(3+\sqrt{5}\right)
   \left(1+\sqrt{5}\right)^n\right)}{\sqrt{5}\, 2^{n+1}}+2^n\right)\, x^n\\
&amp;amp;= \sum_{n\ge 0}\left(2^{n} - F_{n+2}\right) x^n
\end{align*}
&lt;/div&gt;
&lt;p&gt;which can also be confirmed from the first example by taking its complement, since the number of possible words are &lt;span class="math"&gt;\(2^n\)&lt;/span&gt;&lt;/p&gt;
&lt;font size="+1"&gt;3. At least one 01 as its substring&lt;/font&gt;&lt;p&gt;RE: &lt;span class="math"&gt;\(1^*00^*1(0+1)^*\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
G_3(x) &amp;amp;= \frac{x^2}{(1-2 x) (1-x)^2}\\
&amp;amp;= \sum_{n\ge 0} \left(2^n-n-1\right) x^n
\end{align*}
&lt;/div&gt;
&lt;p&gt;For more, refer &lt;a class="reference external" href="http://algo.inria.fr/flajolet/Publications/book.pdf"&gt;Analytic Combinatorics&lt;/a&gt;, which is a treatise on Generating Functions.&lt;/p&gt;&lt;/div&gt;</description><category>generating function</category><category>mathjax</category><category>regular expression</category><guid>https://g-ar.github.io/posts/regular-expressions-and-generating-functions/</guid><pubDate>Fri, 26 Jan 2018 10:07:34 GMT</pubDate></item><item><title>Communicating With Serial Ports Using Emacs</title><link>https://g-ar.github.io/posts/communicating-with-serial-ports-using-emacs/</link><description>&lt;div&gt;&lt;p&gt;Emacs can even be used to communicate with serial ports! Hence, it can replace softwares like minicom, hyperterminal, putty etc. that are used for serial port communication.&lt;/p&gt;
&lt;p&gt;Making a connection is simple,&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_6386439fabd84729a6bc37c526150621-1"&gt;&lt;/a&gt;M-x serial-term
&lt;/pre&gt;&lt;p&gt;enter port name and baud rate, and it's connected!&lt;/p&gt;
&lt;p&gt;E.g. In Linux based systems, if we need to connect to a GSM modem, find its port name by listing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/dev/serial/by-id/&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_cf48c2ef2dbb476aa8711fbaf4146d0c-1"&gt;&lt;/a&gt;ls -l /dev/serial/by-id/
&lt;/pre&gt;&lt;p&gt;which will show the symbolic link to the serial port to be used. Suppose the name is &lt;tt class="docutils literal"&gt;/dev/ttyUSB3&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Then, using that name with the default baud rate (9600 bps) connects to the modem. The settings can be changed at runtime without requiring to reconnect to the serial port.&lt;/p&gt;
&lt;p&gt;And we may issue the standard AT commands&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-1"&gt;&lt;/a&gt;at
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-2"&gt;&lt;/a&gt;OK
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-3"&gt;&lt;/a&gt;at+cpin?
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-4"&gt;&lt;/a&gt;+CPIN: READY
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-6"&gt;&lt;/a&gt;OK
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-7"&gt;&lt;/a&gt;at+csq
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-8"&gt;&lt;/a&gt;+CSQ: 14,99
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-10"&gt;&lt;/a&gt;OK
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-11"&gt;&lt;/a&gt;at+cmgf=1
&lt;a name="rest_code_8abf1fe919034ca99fd08fce57e22ec2-12"&gt;&lt;/a&gt;OK
&lt;/pre&gt;&lt;/div&gt;</description><category>emacs</category><category>linux</category><category>serial port</category><guid>https://g-ar.github.io/posts/communicating-with-serial-ports-using-emacs/</guid><pubDate>Sun, 31 Dec 2017 16:30:37 GMT</pubDate></item><item><title>Animations with Context Free Art</title><link>https://g-ar.github.io/posts/animations-with-context-free-art/</link><description>&lt;div&gt;&lt;p&gt;Context Free Art can also be used to create animations, and here let's see how to generate some moire patterns.&lt;/p&gt;
&lt;p&gt;To generate each frame, cfdg uses the &lt;tt class="docutils literal"&gt;time&lt;/tt&gt; parameter, and the &lt;tt class="docutils literal"&gt;ftime()&lt;/tt&gt; function gets the value for that frame. For our first example, we generate moire patterns with circles.&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-17"&gt;17&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-18"&gt;18&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-19"&gt;19&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-20"&gt;20&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-21"&gt;21&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_211b4918c74e4637a959502614cc036b-22"&gt;22&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-1"&gt;&lt;/a&gt;startshape start
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-3"&gt;&lt;/a&gt;CF::Time = [time -2 2]
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-4"&gt;&lt;/a&gt;CF::Background = [b 1]
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-5"&gt;&lt;/a&gt;CF::Size = [s 3]
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-7"&gt;&lt;/a&gt;path circ(number rad) {
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-8"&gt;&lt;/a&gt;    MOVETO(rad,0)
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-9"&gt;&lt;/a&gt;    ARCTO(-rad,0,rad, CF::ArcCW)
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-10"&gt;&lt;/a&gt;    ARCTO(rad,0,rad, CF::ArcCW)
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-11"&gt;&lt;/a&gt;    STROKE(0.01)[]
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-12"&gt;&lt;/a&gt;}
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-14"&gt;&lt;/a&gt;shape moire {
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-15"&gt;&lt;/a&gt;    loop 70 [s 0.98]
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-16"&gt;&lt;/a&gt;        circ(1)[]
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-17"&gt;&lt;/a&gt;}
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-19"&gt;&lt;/a&gt;shape start {
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-20"&gt;&lt;/a&gt;    moire[x ftime() time -2 2 s 1]
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-21"&gt;&lt;/a&gt;    moire[x -ftime() time -2 2 s 1]
&lt;a name="rest_code_211b4918c74e4637a959502614cc036b-22"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;To compile and generate the video of the animations&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_06a3fd4f841a4dcaa03bec3549e756ca-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_06a3fd4f841a4dcaa03bec3549e756ca-1"&gt;&lt;/a&gt;cfdg moire_circles.cfdg -s &lt;span class="m"&gt;1080&lt;/span&gt; -a 15x25 -o ta%f.png
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;generates 375 images (15 seconds, 25 fps) for the animation&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/animations-with-context-free-art/#rest_code_7ea16f47dff74821a8909b5410ff7d60-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_7ea16f47dff74821a8909b5410ff7d60-1"&gt;&lt;/a&gt;ffmpeg -r &lt;span class="m"&gt;25&lt;/span&gt; -i ./ta%3d.png -c:v libx264 out.mp4
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;creates the HD video having a frame rate of 25.&lt;/p&gt;
&lt;p&gt;And here's the final output&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="youtube-video align-center"&gt;
&lt;iframe width="425" height="344" src="https://www.youtube.com/embed/nPbH9a-jz2w?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Similarly, we can create a couple more animations like moire patterns by &lt;a class="reference external" href="https://github.com/g-ar/CFreeArt/blob/master/v3/moire_lines.cfdg"&gt;rotating grates&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/g-ar/CFreeArt/blob/master/v3/moire_graphene.cfdg"&gt;rotating two graphene layers&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="youtube-video align-center"&gt;
&lt;iframe width="425" height="344" src="https://www.youtube.com/embed/GNHMPBs9Ozo?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;div class="youtube-video align-center"&gt;
&lt;iframe width="425" height="344" src="https://www.youtube.com/embed/uEw5a-Quk6Q?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;</description><category>computer art</category><category>context free art</category><category>moire patterns</category><guid>https://g-ar.github.io/posts/animations-with-context-free-art/</guid><pubDate>Sat, 11 Nov 2017 14:58:56 GMT</pubDate></item><item><title>Optical Illusions with Context Free Art</title><link>https://g-ar.github.io/posts/optical-illusions-with-context-free-art/</link><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.contextfreeart.org"&gt;Context Free Art&lt;/a&gt; is a program to generate images using context free grammar. We can obtain beautiful images by writing a few tens of lines of code.&lt;/p&gt;
&lt;p&gt;To make it more interesting, let's write code for Optical Illusions. There's a &lt;a class="reference external" href="https://tex.stackexchange.com/questions/129274/showcase-of-optical-illusions-made-with-tex-latex-luatex-context/"&gt;nice list&lt;/a&gt; already done using LaTeX, below are translations and output of some of those.&lt;/p&gt;
&lt;p&gt;CFDG uses &lt;tt class="docutils literal"&gt;startshape&lt;/tt&gt; to know which shape to call first. Then the startshape can use other shapes or paths (primitive symbols, user defined).&lt;/p&gt;
&lt;p&gt;Read the &lt;a class="reference external" href="https://github.com/MtnViewJohn/context-free/wiki"&gt;documentation&lt;/a&gt; for details and examples.&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-17"&gt;17&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-18"&gt;18&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-19"&gt;19&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-20"&gt;20&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-21"&gt;21&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-22"&gt;22&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-23"&gt;23&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-24"&gt;24&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-25"&gt;25&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-26"&gt;26&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-27"&gt;27&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-28"&gt;28&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-29"&gt;29&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_da1b0e77851145f79de840806ac64cfc-30"&gt;30&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-1"&gt;&lt;/a&gt;startshape start
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-3"&gt;&lt;/a&gt;CF::Background = [hue 90 sat -0.5 b -0.5]
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-4"&gt;&lt;/a&gt;CF::Size = [s 15]
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-6"&gt;&lt;/a&gt;shape start {
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-7"&gt;&lt;/a&gt;    loop j=6 [] {
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-8"&gt;&lt;/a&gt;    rad = 28 + j*14
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-9"&gt;&lt;/a&gt;    twist = (-1)^j * 12
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-10"&gt;&lt;/a&gt;        loop i=rad [] {
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-11"&gt;&lt;/a&gt;            xs = (j + 2)*cos(i*360/rad)
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-12"&gt;&lt;/a&gt;            ys = (j + 2)*sin(i*360/rad)
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-13"&gt;&lt;/a&gt;            rota = i*360/rad + twist
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-14"&gt;&lt;/a&gt;            if (mod(i, 2) == 1) {
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-15"&gt;&lt;/a&gt;                sq [b 1 x xs y ys r rota]
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-16"&gt;&lt;/a&gt;            } else {
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-17"&gt;&lt;/a&gt;                sq [b -1 x xs y ys r rota]
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-18"&gt;&lt;/a&gt;            }
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-19"&gt;&lt;/a&gt;        }
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-20"&gt;&lt;/a&gt;    }
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-21"&gt;&lt;/a&gt;}
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-23"&gt;&lt;/a&gt;path sq {
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-24"&gt;&lt;/a&gt;    MOVETO(0, 0)
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-25"&gt;&lt;/a&gt;    LINETO(0, 0.3)
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-26"&gt;&lt;/a&gt;    LINETO(0.3, 0.3)
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-27"&gt;&lt;/a&gt;    LINETO(0.3, 0)
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-28"&gt;&lt;/a&gt;    LINETO(0, 0)
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-29"&gt;&lt;/a&gt;    STROKE(0.03)[]
&lt;a name="rest_code_da1b0e77851145f79de840806ac64cfc-30"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="figure"&gt;
&lt;img alt="../../images/sqr_circles.png" src="https://g-ar.github.io/images/sqr_circles.png"&gt;
&lt;p class="caption"&gt;Illusion 1&lt;/p&gt;
&lt;/div&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-17"&gt;17&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-18"&gt;18&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-19"&gt;19&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-20"&gt;20&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-21"&gt;21&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-22"&gt;22&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/optical-illusions-with-context-free-art/#rest_code_764bce1964114d739ad9f4a1b9bc1828-23"&gt;23&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-1"&gt;&lt;/a&gt;startshape start
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-3"&gt;&lt;/a&gt;CF::Background = [hue 90 sat -0.5 b -0.5]
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-4"&gt;&lt;/a&gt;n = 8
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-5"&gt;&lt;/a&gt;xt = (n - 1)/2
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-6"&gt;&lt;/a&gt;yt = (n - 1)/2
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-7"&gt;&lt;/a&gt;scale = n + 2
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-8"&gt;&lt;/a&gt;CF::Size = [s scale x -xt y -yt]
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-9"&gt;&lt;/a&gt;sqd = 0.8                 // square size
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-10"&gt;&lt;/a&gt;circd = sqrt(2)*(1 - sqd) // circle size
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-12"&gt;&lt;/a&gt;shape start {
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-13"&gt;&lt;/a&gt;    loop j=n [] {
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-14"&gt;&lt;/a&gt;        loop i=n [] {
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-15"&gt;&lt;/a&gt;            ys = j + 0.5
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-16"&gt;&lt;/a&gt;            xs = i + 0.5
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-17"&gt;&lt;/a&gt;            SQUARE[b -1 s sqd x i y j]
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-18"&gt;&lt;/a&gt;            if (i &amp;lt; n-1 &amp;amp;&amp;amp; j &amp;lt; n-1) {
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-19"&gt;&lt;/a&gt;                CIRCLE[z 1 b 1 s circd x xs y ys]
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-20"&gt;&lt;/a&gt;            }
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-21"&gt;&lt;/a&gt;        }
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-22"&gt;&lt;/a&gt;    }
&lt;a name="rest_code_764bce1964114d739ad9f4a1b9bc1828-23"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="figure"&gt;
&lt;img alt="../../images/grid.png" src="https://g-ar.github.io/images/grid.png"&gt;
&lt;p class="caption"&gt;Illusion 2&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Output of illusions &lt;a class="reference external" href="https://github.com/g-ar/CFreeArt/blob/master/v3/circles_lines.cfdg"&gt;three&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/g-ar/CFreeArt/blob/master/v3/floor_tiles.cfdg"&gt;four&lt;/a&gt;, and &lt;a class="reference external" href="https://github.com/g-ar/CFreeArt/blob/master/v3/grid_lines.cfdg"&gt;five&lt;/a&gt; are shown below&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="../../images/circles_lines.png" src="https://g-ar.github.io/images/circles_lines.png"&gt;
&lt;p class="caption"&gt;Illusion 3&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="../../images/floor_tiles.png" src="https://g-ar.github.io/images/floor_tiles.png"&gt;
&lt;p class="caption"&gt;Illusion 4&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="../../images/grid_lines.png" src="https://g-ar.github.io/images/grid_lines.png"&gt;
&lt;p class="caption"&gt;Illusion 5&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;These examples only used simple loops, more complicated shapes can be drawn using recursion. Check out the &lt;a class="reference external" href="https://www.contextfreeart.org/gallery/"&gt;CFDG gallery&lt;/a&gt; for more examples.&lt;/p&gt;&lt;/div&gt;</description><category>computer art</category><category>context free art</category><category>optical illusion</category><guid>https://g-ar.github.io/posts/optical-illusions-with-context-free-art/</guid><pubDate>Sun, 05 Nov 2017 12:08:03 GMT</pubDate></item></channel></rss>