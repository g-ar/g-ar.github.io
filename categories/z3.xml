<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gopinath A R (Z3)</title><link>https://g-ar.github.io/</link><description></description><atom:link type="application/rss+xml" rel="self" href="https://g-ar.github.io/categories/z3.xml"></atom:link><language>en</language><lastBuildDate>Mon, 27 Apr 2020 17:55:18 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Solving Mastermind-like Problems Using Z3 Theorem Prover</title><link>https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/</link><description>&lt;div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;4 7 2 9 1 - One number is correct but not in right position&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;9 4 6 8 7 - One number is correct but not in right position&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;3 1 8 7 2 - Two numbers are correct but only one is in right position&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;1 5 7 3 9 - Two numbers are correct and both in right position&lt;/em&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Assuming all the digits are distinct, what is the 5-digit number?&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;(Asked on &lt;a class="reference external" href="https://puzzling.stackexchange.com/questions/97032/5-digit-puzzle-code-looking-for-solution"&gt;puzzling stackexchange&lt;/a&gt;)&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This can be quite easily solved using Z3 theorem prover, once we figure out to set up the constraints.&lt;/p&gt;
&lt;p&gt;We have 5 variables, &lt;span class="math"&gt;\(\{x_i\}, i=0, 1, 2, 3, 4\)&lt;/span&gt;
which are constrained by&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle
0 \le x_i &amp;amp;\le 9 \\
x_i \neq x_j \land i &amp;amp;\neq j\\
[x_0 \neq 4] + [x_1 \neq 7] + [x_2 \neq 2] + [x_3 \neq 9] + [x_4 \neq 1] &amp;amp;= 5\\
[x_0 \neq 9] + [x_1 \neq 4] + [x_2 \neq 6] + [x_3 \neq 8] + [x_4 \neq 7] &amp;amp;= 5\\
[x_0 \neq 3] + [x_1 \neq 1] + [x_2 \neq 8] + [x_3 \neq 7] + [x_4 \neq 2] &amp;amp;= 4\\
[x_0 \neq 1] + [x_1 \neq 5] + [x_2 \neq 7] + [x_3 \neq 3] + [x_4 \neq 9] &amp;amp;= 3\\
\end{align*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\([\cdot]\)&lt;/span&gt; is the Iverson Bracket notation (1 if the condition holds, 0 otherwise).&lt;/p&gt;
&lt;p&gt;When checking the models for which the conditions are satisfied, we will also check that the number of digits satisfying the conditions holds good, using set intersection.&lt;/p&gt;
&lt;p&gt;We solve it using python bindings to Z3, which can be installed in python virtual environment by&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_a53af38f44f34f5cb587f4e45aeba0cc-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_a53af38f44f34f5cb587f4e45aeba0cc-1"&gt;&lt;/a&gt;pip install z3-solver
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Then, we can solve the above by running the following python code:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-17"&gt;17&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-18"&gt;18&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-19"&gt;19&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-20"&gt;20&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-21"&gt;21&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-22"&gt;22&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-23"&gt;23&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-24"&gt;24&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-25"&gt;25&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-26"&gt;26&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-27"&gt;27&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-28"&gt;28&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-29"&gt;29&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-30"&gt;30&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-31"&gt;31&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-32"&gt;32&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-33"&gt;33&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-34"&gt;34&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-35"&gt;35&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-36"&gt;36&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-37"&gt;37&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-38"&gt;38&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-39"&gt;39&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-40"&gt;40&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-41"&gt;41&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-42"&gt;42&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-43"&gt;43&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-44"&gt;44&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-45"&gt;45&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-46"&gt;46&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-47"&gt;47&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-48"&gt;48&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-49"&gt;49&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-50"&gt;50&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-51"&gt;51&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/#rest_code_5467346168334f5fa9638b7939402791-52"&gt;52&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_5467346168334f5fa9638b7939402791-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;z3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Solver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-8"&gt;&lt;/a&gt;         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-9"&gt;&lt;/a&gt;         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-10"&gt;&lt;/a&gt;         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# variables&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x[&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-15"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# constraints&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-16"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-17"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    All are distinct&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-18"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    '''&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-21"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-22"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    All numbers 0 &amp;lt;= x_i &amp;lt;= 9&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-23"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    '''&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-25"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-27"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# no number in correct position&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-28"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# no number in correct position&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-29"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# one number in correct position&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-30"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# two numbers in correct position&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-32"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-34"&gt;&lt;/a&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;sat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-35"&gt;&lt;/a&gt;        &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-36"&gt;&lt;/a&gt;        &lt;span class="n"&gt;xval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_long&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-37"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;\
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-38"&gt;&lt;/a&gt;           &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;\
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-39"&gt;&lt;/a&gt;           &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;\
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-40"&gt;&lt;/a&gt;           &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-41"&gt;&lt;/a&gt;            &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-42"&gt;&lt;/a&gt;            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-43"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Or&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_long&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt; &lt;span class="c1"&gt;# add constraint to check for different solution&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-44"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-45"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#solutions: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-46"&gt;&lt;/a&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-47"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-48"&gt;&lt;/a&gt;    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-49"&gt;&lt;/a&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-50"&gt;&lt;/a&gt;&lt;span class="sd"&gt;[6, 5, 0, 3, 2]&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-51"&gt;&lt;/a&gt;&lt;span class="sd"&gt;#solutions:  1&lt;/span&gt;
&lt;a name="rest_code_5467346168334f5fa9638b7939402791-52"&gt;&lt;/a&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;If we remove the &lt;tt class="docutils literal"&gt;distinct&lt;/tt&gt; constraint, we get 19 different solutions.&lt;/p&gt;
&lt;p&gt;We find that Z3 and other SMT solvers are powerful tools for verification computer programs / hardware designs, perform compiler optimizations, finding bugs etc. And solving Logic puzzles!&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Z3_Theorem_Prover"&gt;Z3 Theorem Prover wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.hakank.org/z3/"&gt;HakanK's page on Z3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm"&gt;A guide to Z3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>mastermind</category><category>mathjax</category><category>numbermind</category><category>puzzle</category><category>SAT</category><category>SMT</category><category>Z3</category><guid>https://g-ar.github.io/posts/solving-mastermind-like-problems-using-z3-theorem-prover/</guid><pubDate>Mon, 27 Apr 2020 17:52:20 GMT</pubDate></item></channel></rss>