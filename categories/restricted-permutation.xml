<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Gopinath A R (restricted permutation)</title><link>https://g-ar.github.io/</link><description></description><atom:link type="application/rss+xml" href="https://g-ar.github.io/categories/restricted-permutation.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 15 Sep 2016 17:51:38 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Directed Graphs to form multivariate recurrence relations</title><link>https://g-ar.github.io/posts/using-directed-graphs-to-form-multivariate-recurrence-relations/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;There are items comprising of red cubes, blue cubes, and balls;
how many ways can 3 red cubes, 4 blue cubes and 8 balls be arranged in a line so that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No three cubes are consecutive&lt;/li&gt;
&lt;li&gt;No three balls are consecutive&lt;/li&gt;
&lt;li&gt;No two red cubes are next to one another&lt;/li&gt;
&lt;li&gt;No two blue cubes are next to one another&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How do we go about finding a general formula for &lt;span class="math"&gt;\(r\)&lt;/span&gt; red cubes, &lt;span class="math"&gt;\(b\)&lt;/span&gt; blue cubes and &lt;span class="math"&gt;\(c\)&lt;/span&gt; balls ?&lt;/p&gt;
&lt;p&gt;The answer lies in forming a directed graph / Finite Automaton, as we have seen it in one of the previous posts.&lt;/p&gt;
&lt;p&gt;Instead of filling in the number of ways, we use the variable names as weights for the valid transitions.&lt;/p&gt;
&lt;p&gt;Hence, we can directly solve for the general case by using the following adjacency matrix:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \begin{array}{|l|rrrrrr|}\hline &amp;amp; \mathrm{I} &amp;amp; \mathrm{R} &amp;amp; \mathrm{B} &amp;amp; \mathrm{C} &amp;amp; \mathrm{BR} &amp;amp; \mathrm{CC} \\ \hline \mathrm{I} &amp;amp; 0 &amp;amp; r &amp;amp; b &amp;amp; c &amp;amp; 0 &amp;amp; 0 \\ \mathrm{R} &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; c &amp;amp; b &amp;amp; 0 \\ \mathrm{B} &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; c &amp;amp; r &amp;amp; 0 \\ \mathrm{C} &amp;amp; 0 &amp;amp; r &amp;amp; b &amp;amp; 0 &amp;amp; 0 &amp;amp; c \\ \mathrm{BR} &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; c &amp;amp; 0 &amp;amp; 0 \\ \mathrm{CC} &amp;amp; 0 &amp;amp; r &amp;amp; b &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\ \hline \end{array}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;which is for the constraints that there's no &lt;span class="math"&gt;\(RR, BB, RBR, BRB\)&lt;/span&gt; or &lt;span class="math"&gt;\(CCC\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, for 15 items, we compute&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \left(\begin{array}{rrrrrr} 0 &amp;amp; r &amp;amp; b &amp;amp; c &amp;amp; 0 &amp;amp; 0 \\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; c &amp;amp; b &amp;amp; 0 \\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; c &amp;amp; r &amp;amp; 0 \\ 0 &amp;amp; r &amp;amp; b &amp;amp; 0 &amp;amp; 0 &amp;amp; c \\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; c &amp;amp; 0 &amp;amp; 0 \\ 0 &amp;amp; r &amp;amp; b &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \end{array}\right)^{15}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and extract &lt;span class="math"&gt;\([c^8 b^4 r^3]\)&lt;/span&gt; from the sum of the first row, which is &lt;span class="math"&gt;\(11394\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We may also compute the characteristic polynomial of the matrix to get the structure of its multivariate recurrence
relation:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle x^6 - (bc + cr)x^4 - (bc^2 + 2bcr + c^2r)x^3 - 2bc^2rx^2 = 0
\end{equation*}
&lt;/div&gt;
&lt;p&gt;which is just like the characteristic equation of a recurrence relation, which is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle f_{b,c,r} = f_{b-1,c-1,r}+f_{b,c-1,r-1}+f_{b-1,c-2,r}+f_{b,c-2,r-1}+2 \left(f_{b-1,c-1,r-1}+f_{b-1,c-2,r-1}\right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and set the required boundary conditions.&lt;/p&gt;
&lt;p&gt;Computing the regular expression from the minimized DFA gives us the following multivariate generating function:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle G(r,b,c) = \frac{\left(1+c+c^2\right)\left(1+b+r+2br\right)}{1-c\left(1+c\right)\left(b+r+2br\right)}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://math.stackexchange.com/questions/866503/putting-objects-in-a-line"&gt;Putting objects in a line&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><category>recurrence</category><category>restricted permutation</category><category>sage</category><guid>https://g-ar.github.io/posts/using-directed-graphs-to-form-multivariate-recurrence-relations/</guid><pubDate>Sat, 26 Jul 2014 10:56:48 GMT</pubDate></item><item><title>Using directed graphs to count the number of patterns</title><link>https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;How many n-digit numbers are there which do not contain 122 and 213 in them? Numbers start with a nonzero digit.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We can write a directed graph to solve that, the weighted adjacency matrix for which is given by:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle D = \left(\begin{array}{ccccccc} &amp;amp; I &amp;amp; A &amp;amp; 1 &amp;amp; 2 &amp;amp; 12 &amp;amp; 21 \\ I &amp;amp; 0 &amp;amp; 7 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \\ A &amp;amp; 0 &amp;amp; 8 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \\ 1 &amp;amp; 0 &amp;amp; 8 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 \\ 2 &amp;amp; 0 &amp;amp; 8 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 \\ 12 &amp;amp; 0 &amp;amp; 8 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \\ 21 &amp;amp; 0 &amp;amp; 7 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 \end{array}\right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;'I' is the initial state, '1' and '2' are the states if those digits are the last encountered.
&lt;span class="math"&gt;\(A\)&lt;/span&gt; is for any other valid digits. It goes to state &lt;span class="math"&gt;\(12\)&lt;/span&gt; or &lt;span class="math"&gt;\(21\)&lt;/span&gt; if we see a sequence of 12 or 21, respectively. The number of ways of valid transitions are given as the weights.&lt;/p&gt;
&lt;p&gt;There, the hard work is done. Leave the remaining to Sage!&lt;/p&gt;
&lt;p&gt;Obtain the characteristic polynomial of the matrix, which also is the characteristic equation of the required recurrence equation.&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_76a64a2c878047e2bf067001c7ecf7e1-0"&gt;0&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_76a64a2c878047e2bf067001c7ecf7e1-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_76a64a2c878047e2bf067001c7ecf7e1-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_76a64a2c878047e2bf067001c7ecf7e1-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_76a64a2c878047e2bf067001c7ecf7e1-4"&gt;4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_76a64a2c878047e2bf067001c7ecf7e1-5"&gt;5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_76a64a2c878047e2bf067001c7ecf7e1-6"&gt;6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_76a64a2c878047e2bf067001c7ecf7e1-7"&gt;7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_76a64a2c878047e2bf067001c7ecf7e1-8"&gt;8&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_76a64a2c878047e2bf067001c7ecf7e1-0"&gt;&lt;/a&gt;&lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
&lt;a name="rest_code_76a64a2c878047e2bf067001c7ecf7e1-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_76a64a2c878047e2bf067001c7ecf7e1-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_76a64a2c878047e2bf067001c7ecf7e1-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_76a64a2c878047e2bf067001c7ecf7e1-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_76a64a2c878047e2bf067001c7ecf7e1-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_76a64a2c878047e2bf067001c7ecf7e1-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_76a64a2c878047e2bf067001c7ecf7e1-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_76a64a2c878047e2bf067001c7ecf7e1-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;characteristic_polynomial&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The characteristic equation is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle x^{5} - 10x^{4} + 2x^{2} - 1 = 0
\end{equation*}
&lt;/div&gt;
&lt;p&gt;So, the recurrence would be:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle a_{i+5}&amp;amp;=10\, a_{i+4}-2\, a_{i+2}+a_{i} \\
a_{0}&amp;amp;=1\\
a_{1}&amp;amp;= 9\\
a_{2}&amp;amp;= 90\\
a_{3}&amp;amp;= 898\\
a_{4}&amp;amp;= 8962\\
\end{align*}
&lt;/div&gt;
&lt;p&gt;Wonder if anyone can come up with a combinatorial argument for that equation?!&lt;/p&gt;
&lt;p&gt;Initial conditions can be easily obtained by matrix exponentiation or using a program to iterate through the sequences, e.g.&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_e1f4d7cde7a14c5fad06587af1abf082-0"&gt;0&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_e1f4d7cde7a14c5fad06587af1abf082-0"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;or&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_ec47dbe0b04944b4802bf75420d3db63-0"&gt;0&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_ec47dbe0b04944b4802bf75420d3db63-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_ec47dbe0b04944b4802bf75420d3db63-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_ec47dbe0b04944b4802bf75420d3db63-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_ec47dbe0b04944b4802bf75420d3db63-4"&gt;4&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_ec47dbe0b04944b4802bf75420d3db63-0"&gt;&lt;/a&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_ec47dbe0b04944b4802bf75420d3db63-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ec47dbe0b04944b4802bf75420d3db63-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'122'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'213'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ec47dbe0b04944b4802bf75420d3db63-3"&gt;&lt;/a&gt;        &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_ec47dbe0b04944b4802bf75420d3db63-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;We can also automatically get the generating function of the obtained recurrence by using a small program (method is given in "Lectures on generating functions" by S. K. Lando):&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_c2e22e56c6874f90b484d700a5b60a5f-0"&gt;0&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_c2e22e56c6874f90b484d700a5b60a5f-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_c2e22e56c6874f90b484d700a5b60a5f-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_c2e22e56c6874f90b484d700a5b60a5f-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_c2e22e56c6874f90b484d700a5b60a5f-4"&gt;4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_c2e22e56c6874f90b484d700a5b60a5f-5"&gt;5&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_c2e22e56c6874f90b484d700a5b60a5f-0"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_gf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;initvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c2e22e56c6874f90b484d700a5b60a5f-1"&gt;&lt;/a&gt;    &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c2e22e56c6874f90b484d700a5b60a5f-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Am&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zero_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;augment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identity_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;alst&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;a name="rest_code_c2e22e56c6874f90b484d700a5b60a5f-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Bm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;initvals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c2e22e56c6874f90b484d700a5b60a5f-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;identity_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Am&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Bm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_simplify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c2e22e56c6874f90b484d700a5b60a5f-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_gf&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;898&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8962&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;which gives the g.f.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle G(x)=\frac{x - 1}{x^{5} - 2 \, x^{3} + 10 \, x - 1}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;There are tremendous uses of generating functions, one of which is to obtain an asymptotic formula. (See William Feller's book on probability for a brief explanation on the topic)&lt;/p&gt;
&lt;p&gt;If we have a generating function of the form &lt;span class="math"&gt;\(G(x)=U(x)/V(x)\)&lt;/span&gt;, then the asymptotic form is given by&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle a_n \sim \dfrac{\rho_1}{s_1^{n+1}}
\displaystyle \textrm{where }\rho_1=\dfrac{-U(s_1)}{V^{'}(s_1)}
\displaystyle \textrm{and }s_1 \textrm{ is the root of }V(x)\textrm{ nearest to origin}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;We will visually inspect where the roots lie, to get an idea about the closest root to the origin&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_fd916905ecc74fa5849e18f5971d5585-0"&gt;0&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_fd916905ecc74fa5849e18f5971d5585-0"&gt;&lt;/a&gt;&lt;span class="n"&gt;complex_plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="figure"&gt;
&lt;img alt="../../images/complexroot.jpg" src="https://g-ar.github.io/images/complexroot.jpg"&gt;
&lt;p class="caption"&gt;complex plot of the equation&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;and we see that there is only one real root (also the nearest to origin) and other four are complex.&lt;/p&gt;
&lt;p&gt;We can proceed with the following steps in Sage:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_0852fbedecbd4f018cb6ce6fc210fdf3-0"&gt;0&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_0852fbedecbd4f018cb6ce6fc210fdf3-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_0852fbedecbd4f018cb6ce6fc210fdf3-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/#rest_code_0852fbedecbd4f018cb6ce6fc210fdf3-3"&gt;3&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_0852fbedecbd4f018cb6ce6fc210fdf3-0"&gt;&lt;/a&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0852fbedecbd4f018cb6ce6fc210fdf3-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;rho1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0852fbedecbd4f018cb6ce6fc210fdf3-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rho1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0852fbedecbd4f018cb6ce6fc210fdf3-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;We find the approximation to be&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle a_n \sim \frac{0.0905207193521}{0.100200193518^{n + 1}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The &lt;span class="math"&gt;\(15^{th}\)&lt;/span&gt; term using the asymptotic formula gives about &lt;span class="math"&gt;\(876700051238642\)&lt;/span&gt;, which is only a little more than the actual value of &lt;span class="math"&gt;\(876700051238641\)&lt;/span&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><category>recurrence</category><category>restricted permutation</category><category>sage</category><guid>https://g-ar.github.io/posts/using-directed-graphs-to-count-the-number-of-patterns/</guid><pubDate>Wed, 12 Feb 2014 15:13:44 GMT</pubDate></item></channel></rss>