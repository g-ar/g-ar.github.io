<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gopinath A R (expected value)</title><link>https://g-ar.github.io/</link><description></description><atom:link href="https://g-ar.github.io/categories/expected-value.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 16 Sep 2016 08:36:36 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Getting started with experimental mathematics</title><link>https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;Here is one &lt;a class="reference external" href="https://math.stackexchange.com/questions/1061083/average-time-to-fill-boxes-with-balls/"&gt;nice problem&lt;/a&gt; to describe how arrive at a formula experimentally.&lt;/p&gt;
&lt;p&gt;To rephrase the problem:&lt;/p&gt;
&lt;p&gt;There are &lt;span class="math"&gt;\(m\)&lt;/span&gt; people with one ball each, and &lt;span class="math"&gt;\(n\)&lt;/span&gt; boxes. In a round, each of them picks one box randomly (uniformly and independently) and
drops the ball in it. Whichever box is not empty is removed, and the next round starts. How many rounds, on an average, will it take till no
boxes are left?&lt;/p&gt;
&lt;p&gt;Obtaining a formula directly by combinatorial arguments without computing any values and getting it right is quite difficult, and prone to errors.&lt;/p&gt;
&lt;p&gt;So, let us obtain it experimentally.&lt;/p&gt;
&lt;p&gt;What does experimental math involve?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Brute force through the problem&lt;ul&gt;
&lt;li&gt;Write a program which describes the problem&lt;/li&gt;
&lt;li&gt;obtain the first few values&lt;/li&gt;
&lt;li&gt;take it to either oeis or a sequence guessing routine&lt;/li&gt;
&lt;li&gt;Then we may be able to find a formula&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If it's a problem on probability, do a simulation to cross verify with the formula&lt;/li&gt;
&lt;li&gt;Having a lot of fun, doing both math and programming at the same time!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Back to our problem, how many rounds can we expect for the game to last? Let us do the simulation by computing answers for small values, in J:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_db608cfca974444d89d6f3333fa3a165-12"&gt;12&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-1"&gt;&lt;/a&gt;   'm n'=:5 3
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-2"&gt;&lt;/a&gt;   sim=: 3 : 0
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-3"&gt;&lt;/a&gt;a=:m
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-4"&gt;&lt;/a&gt;c=:0
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-5"&gt;&lt;/a&gt;while. (a&amp;gt;0) do.
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-6"&gt;&lt;/a&gt;b=:+/~:?n#a
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-7"&gt;&lt;/a&gt;a=:a-b
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-8"&gt;&lt;/a&gt;c=:c+1
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-9"&gt;&lt;/a&gt;end.
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-10"&gt;&lt;/a&gt;c return.
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-11"&gt;&lt;/a&gt;)
&lt;a name="rest_code_db608cfca974444d89d6f3333fa3a165-12"&gt;&lt;/a&gt;   (+/%#)(sim"0)1e5#0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Running the above gives a value of about &lt;span class="math"&gt;\(2.554\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Next, we will try to compute some numbers:
How many ways is it possible for 3 balls to be placed 5 boxes such that everybody chooses the same box?&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(abc,0,0,0,0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(= 5\)&lt;/span&gt; ways&lt;/p&gt;
&lt;p&gt;How many ways is it possible for 3 balls to be placed 5 boxes such that two boxes are selected?&lt;/p&gt;
&lt;p&gt;Do some casework:&lt;/p&gt;
&lt;p&gt;One box may contain two balls, one box with one ball and one empty box.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(ab,c,0,0,0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(ac,b,0,0,0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(bc,a,0,0,0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(= 3\cdot 5!/3! = 60\)&lt;/span&gt; ways&lt;/p&gt;
&lt;p&gt;How many ways is it possible for 3 balls to be placed 5 boxes such that 3 boxes are selected?&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(a,b,c,0,0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(= 5!/2! = 60\)&lt;/span&gt; ways&lt;/p&gt;
&lt;p&gt;And we see that the total turns out to be &lt;span class="math"&gt;\(5 + 60 + 60 = 125\)&lt;/span&gt;, which is 53, the number of ways of arranging the balls in boxes without any restriction.&lt;/p&gt;
&lt;p&gt;To calculate the expected value, we have&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
E[n] = p_1 * E[n-1] + p_2 * E[n-2] + \cdots + p_m * E[n-m]
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(p_m\)&lt;/span&gt; means the probability of choosing &lt;span class="math"&gt;\(m\)&lt;/span&gt; different boxes from &lt;span class="math"&gt;\(n\)&lt;/span&gt; boxes.&lt;/p&gt;
&lt;p&gt;For &lt;span class="math"&gt;\(m=3\)&lt;/span&gt; and &lt;span class="math"&gt;\(n=5\)&lt;/span&gt;, &lt;span class="math"&gt;\(E[5] = 5/125*E[4]+60/125*E[3]+60/125*E[2] + 1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Then, calculate similarly for &lt;span class="math"&gt;\(n=4\)&lt;/span&gt; and &lt;span class="math"&gt;\(m=3\)&lt;/span&gt; to get &lt;span class="math"&gt;\(E[4]\)&lt;/span&gt; and so on.
The boundary condition is &lt;span class="math"&gt;\(E[1]=1\)&lt;/span&gt;, since obviously the game would end in one round if there was a single box.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(E[5]\)&lt;/span&gt; would be &lt;span class="math"&gt;\(\dfrac{18391}{7200} = 2.5543\)&lt;/span&gt; which is close to the simulation. Hence, we can proceed with our experimentation for conjecturing a formula.&lt;/p&gt;
&lt;p&gt;Let us calculate the number of ways to partition a number &lt;span class="math"&gt;\(n\)&lt;/span&gt; of length &lt;span class="math"&gt;\(3\)&lt;/span&gt; (number of people fixed at &lt;span class="math"&gt;\(m=3\)&lt;/span&gt;), using sage:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3a6a3c71cb85445e9f34390a7e1e6626-17"&gt;17&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;afun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aa&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;nbac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;ll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;summ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;alst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Partitions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ll&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;tot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-11"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;tot&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;binomial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-13"&gt;&lt;/a&gt;            &lt;span class="n"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cardinality&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tot&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nbac&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;summ&lt;/span&gt;
&lt;a name="rest_code_3a6a3c71cb85445e9f34390a7e1e6626-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;afun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;What this function afun does is that for &lt;span class="math"&gt;\(n\)&lt;/span&gt; and &lt;span class="math"&gt;\(m\)&lt;/span&gt;, it computes the number of partitions having length &lt;span class="math"&gt;\(l (\le m)\)&lt;/span&gt;, and we compute the list of values for &lt;span class="math"&gt;\(l=m=3\)&lt;/span&gt; and varying &lt;span class="math"&gt;\(n\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Insert that list to oeis, and bingo! The second answer shown looks promising: &lt;span class="math"&gt;\(A(k,3)\)&lt;/span&gt; where &lt;span class="math"&gt;\(A(k,n)= \sum_{m=1}^k (-1)^{m+1}\cdot \binom{n}{m} \cdot m^k\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It seems to be related to the stirling numbers of the second kind.&lt;/p&gt;
&lt;p&gt;After some trial and error, the equation turns out to be:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle E_{n,m} &amp;amp;= \left(\sum_{j=1}^{n-1} \left\lbrace {m \atop j} \right\rbrace \dfrac{n!}{(n-j)!} \dfrac{E_{n-j,m}}{n^m}\right)+1\\
E_{1,m} &amp;amp;= 1
\end{align*}
&lt;/div&gt;
&lt;p&gt;In maxima (which will cache the values to speed up recurrence computation), it can be written as:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_cff1cddfc7774880bca69676f75a40d8-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_cff1cddfc7774880bca69676f75a40d8-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_cff1cddfc7774880bca69676f75a40d8-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_cff1cddfc7774880bca69676f75a40d8-4"&gt;4&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code scheme"&gt;&lt;a name="rest_code_cff1cddfc7774880bca69676f75a40d8-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;m:3$&lt;/span&gt;
&lt;a name="rest_code_cff1cddfc7774880bca69676f75a40d8-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;:1$&lt;/span&gt;
&lt;a name="rest_code_cff1cddfc7774880bca69676f75a40d8-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;:=sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stirling2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;m,j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;*factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;/factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n-j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;*E&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n-j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;/n^m,j,1,n-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;+1$&lt;/span&gt;
&lt;a name="rest_code_cff1cddfc7774880bca69676f75a40d8-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;E&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</description><category>expected value</category><category>experimental mathematics</category><category>J</category><category>mathjax</category><category>recurrence</category><category>sage</category><category>simulation</category><guid>https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/</guid><pubDate>Tue, 16 Dec 2014 11:17:39 GMT</pubDate></item><item><title>Monte-Carlo simulations in J</title><link>https://g-ar.github.io/posts/monte-carlo-simulations-in-j/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;We will see some more problems on probability, and how to do it in J.&lt;/p&gt;
&lt;div class="section" id="derangement-problem"&gt;
&lt;h2&gt;1 Derangement problem&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;There are 30 boxes numbered 1 to 30, and 30 balls numbered 1 to 30. If the balls are put into the boxes (one in each) randomly, what's the probability that none of the balls are put in the boxes with matching number?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;By simulation:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_f33e947b846349bbb5d9dbad758e18e3-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_f33e947b846349bbb5d9dbad758e18e3-2"&gt;2&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_f33e947b846349bbb5d9dbad758e18e3-1"&gt;&lt;/a&gt;sim=: 3 : '0=+/(i.30)=30?30'
&lt;a name="rest_code_f33e947b846349bbb5d9dbad758e18e3-2"&gt;&lt;/a&gt;(+/%#)(sim"0)100000#0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The analytical answer:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_624c05f42fb2493d92f7baa4d4650f37-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_624c05f42fb2493d92f7baa4d4650f37-1"&gt;&lt;/a&gt;+/((30$(1 _1))*(%!i.30))
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="urns-balls-and-a-gamble"&gt;
&lt;h2&gt;2 Urns, balls and a gamble.&lt;/h2&gt;
&lt;p&gt;A game is played with the following rules: There is an urn with 20 balls, 10 red and 10 white. You need pick 10 balls out of these 20.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;If 10 balls are of the same color, you get $300&lt;/li&gt;
&lt;li&gt;If 9 balls are of the same color, you get $30&lt;/li&gt;
&lt;li&gt;If 8 balls are of the same color, you get $3&lt;/li&gt;
&lt;li&gt;If 7 balls are of the same color, you get $2&lt;/li&gt;
&lt;li&gt;If 6 balls are of the same color, you get $1&lt;/li&gt;
&lt;li&gt;If 5 balls are of the same color, you lose $5&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What's your expected amount?&lt;/p&gt;
&lt;p&gt;Simulation answer:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_2759fc8d1a8b41a2af6fd4baea2244bb-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_2759fc8d1a8b41a2af6fd4baea2244bb-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_2759fc8d1a8b41a2af6fd4baea2244bb-3"&gt;3&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_2759fc8d1a8b41a2af6fd4baea2244bb-1"&gt;&lt;/a&gt;a=: 10#0 1
&lt;a name="rest_code_2759fc8d1a8b41a2af6fd4baea2244bb-2"&gt;&lt;/a&gt;sim=: 3 : '((_5 * 5 = ]) + ([: +/ 4 6 =/ ]) + (2 * [: +/ 3 7 =/ ]) + (3 * [: +/ 2 8 =/ ]) + (30 * [: +/ 1 9 =/ ]) + 300 * [: +/ 10 0 =/ ])+/(10?20){a'
&lt;a name="rest_code_2759fc8d1a8b41a2af6fd4baea2244bb-3"&gt;&lt;/a&gt;(+/%#)(sim"0)1000000#0  NB. = _0.826702
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Analytical answer (hypergeometric distribution):&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(A=\{1, 2, 3, 30, 300, -5\}\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \sum_{i=0}^{4}\dfrac{A_i\cdot 2\, \dbinom{10}{i}\dbinom{10}{10-i}}{\dbinom{20}{10}}+\dfrac{A_5\cdot \dbinom{10}{5}^2}{\dbinom{20}{10}} =-\dfrac{76485}{92378}=-0.827956872848514
\end{equation*}
&lt;/div&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_ee176169d76b40a8afaff7a0fa541c21-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_ee176169d76b40a8afaff7a0fa541c21-1"&gt;&lt;/a&gt;_5 1 2 3 30 300)*(((5!10)^2), (2 * (10 !~ ]) * 10 !~ 10 - ]) 6+i.5)%10!20
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="birthday-problem"&gt;
&lt;h2&gt;3 Birthday problem&lt;/h2&gt;
&lt;p&gt;How many people should be in a room such that the probability of at least two of them sharing the same birthday is more than 0.5? (Assume 365 days in an year)&lt;/p&gt;
&lt;p&gt;By Simulation:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_5569d131fca54f43a9e4c55ca68a37a9-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_5569d131fca54f43a9e4c55ca68a37a9-2"&gt;2&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_5569d131fca54f43a9e4c55ca68a37a9-1"&gt;&lt;/a&gt;sim=: 3 : '23&amp;gt;+/~:?23#365'
&lt;a name="rest_code_5569d131fca54f43a9e4c55ca68a37a9-2"&gt;&lt;/a&gt;(+/%#)(sim"0)100000#0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Analytically:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_543d346dfa3c4c9185fd86a913c52ebf-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_543d346dfa3c4c9185fd86a913c52ebf-1"&gt;&lt;/a&gt;1-*/((365-i.23)%(365)) NB. = 0.507297234323985
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;To see a plot of the probabilities, up to 100 people in a room:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_ca62290ff27c4630ac0152be569c7098-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_ca62290ff27c4630ac0152be569c7098-2"&gt;2&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_ca62290ff27c4630ac0152be569c7098-1"&gt;&lt;/a&gt;load'plot'
&lt;a name="rest_code_ca62290ff27c4630ac0152be569c7098-2"&gt;&lt;/a&gt;'marker' plot (1+i.100);((1 - [: */ 365 %~ 365 - i.)"0) 1+i.100
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="dice"&gt;
&lt;h2&gt;4 4 dice&lt;/h2&gt;
&lt;p&gt;Four dice are rolled, what's the probability that no two faces are repeated? (E.g. 6 4 2 5 is okay, but 3 6 5 6 is forbidden)&lt;/p&gt;
&lt;p&gt;By simulation:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_a83e43f5a016434a9b109fbb04b48c36-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_a83e43f5a016434a9b109fbb04b48c36-1"&gt;&lt;/a&gt;sim=: 3 : '(4 = [: +/ [: +/ =/~)?4#6'
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;By permutation:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \mathbb{P}=\dfrac{\dbinom{6}{4}\cdot 4!}{6^4} = \dfrac{5}{18} = 0.2777777
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Putting that in J console:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_db79f17e34cb42fb9d2daea130d60620-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_db79f17e34cb42fb9d2daea130d60620-1"&gt;&lt;/a&gt;((4!6)*!4)%6^4
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;By counting:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_79c2abbc69c54f18be6bef1ce78e3f21-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_79c2abbc69c54f18be6bef1ce78e3f21-1"&gt;&lt;/a&gt;(+/4=+/"1~:"1(6 6 6 6#:i.1296))%6^4 NB. this uses base-6 representation till 6^4
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="the-ballot-problem"&gt;
&lt;h2&gt;5 The ballot problem&lt;/h2&gt;
&lt;p&gt;In an election, candidate A receives n votes, and candidate B receives m votes where &lt;span class="math"&gt;\(n &amp;gt; m\)&lt;/span&gt;. Assuming that all orderings are equally likely, show that the probability that A is always ahead in the count of votes is &lt;span class="math"&gt;\(\dfrac{n - m}{n + m}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Here's a simulation to see that it may be true:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_2574c195d4354d9792368a03e4725719-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_2574c195d4354d9792368a03e4725719-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_2574c195d4354d9792368a03e4725719-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_2574c195d4354d9792368a03e4725719-4"&gt;4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_2574c195d4354d9792368a03e4725719-5"&gt;5&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_2574c195d4354d9792368a03e4725719-1"&gt;&lt;/a&gt;n=:55
&lt;a name="rest_code_2574c195d4354d9792368a03e4725719-2"&gt;&lt;/a&gt;m=:45
&lt;a name="rest_code_2574c195d4354d9792368a03e4725719-3"&gt;&lt;/a&gt;a=:(m#_1),n#1
&lt;a name="rest_code_2574c195d4354d9792368a03e4725719-4"&gt;&lt;/a&gt;sim=: 3 : '100=+/0&amp;lt;+/\(100?100){a'
&lt;a name="rest_code_2574c195d4354d9792368a03e4725719-5"&gt;&lt;/a&gt;(+/%#)(sim"0)100000#0 NB. = 0.0993
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;which is close to 0.1 computed from the formula.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-ace-from-a-regular-deck-of-52-cards"&gt;
&lt;h2&gt;6 An ace from a regular deck of 52 cards&lt;/h2&gt;
&lt;p&gt;A deck of cards is well shuffled, and placed face down on a table. The cards are picked one after another, what's the probability that you get to see the first ace when &lt;span class="math"&gt;\(k^{th}\)&lt;/span&gt; card is picked?&lt;/p&gt;
&lt;p&gt;Finding the answer is quite easy, which is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \mathbb{P}(k)=\dfrac{\dbinom{48}{k-1}}{\dbinom{52}{k-1}}\cdot \dfrac{4}{52-k}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and a simulation can back up our claim, e.g. for &lt;span class="math"&gt;\(k=5\)&lt;/span&gt;:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_cd6034131d0f4f29b6bfa25335b4fbdd-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_cd6034131d0f4f29b6bfa25335b4fbdd-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_cd6034131d0f4f29b6bfa25335b4fbdd-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_cd6034131d0f4f29b6bfa25335b4fbdd-4"&gt;4&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_cd6034131d0f4f29b6bfa25335b4fbdd-1"&gt;&lt;/a&gt;pos=: 5
&lt;a name="rest_code_cd6034131d0f4f29b6bfa25335b4fbdd-2"&gt;&lt;/a&gt;a=:(4#1),48#0
&lt;a name="rest_code_cd6034131d0f4f29b6bfa25335b4fbdd-3"&gt;&lt;/a&gt;sim=: 3 : 'pos=1+{.I.(52?52){a'
&lt;a name="rest_code_cd6034131d0f4f29b6bfa25335b4fbdd-4"&gt;&lt;/a&gt;(+/%#)(sim"0)100000#0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;and the probabilities for first five positions:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulations-in-j/#rest_code_9aaf6e2d7852467ea40c3ae41595bb71-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_9aaf6e2d7852467ea40c3ae41595bb71-1"&gt;&lt;/a&gt;(((48 !~ 1 -~ ]) % 52 !~ 1 -~ ]) * 4 % 52 - 1 -~ ]) 1+i.5
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;</description><category>derangement</category><category>expected value</category><category>J</category><category>mathjax</category><category>probability</category><category>simulation</category><guid>https://g-ar.github.io/posts/monte-carlo-simulations-in-j/</guid><pubDate>Sat, 29 Mar 2014 06:46:24 GMT</pubDate></item><item><title>Applications of Generating Functions</title><link>https://g-ar.github.io/posts/applications-of-generating-functions/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;Generating Function (g.f.) is one of the most important tools in combinatorics. Many problems which are difficult to do by combinatorial arguments and by cases are trivial when g.f. is applied. Below are some typical problems where g.f. are very useful.&lt;/p&gt;
&lt;div class="section" id="solving-diophantine-equations-d-e"&gt;
&lt;h2&gt;1 Solving diophantine equations (d.e.)&lt;/h2&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;What are the number of solutions for the linear d.e.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle x_1+x_2+x_3+x_4=35\\ 1\le x_1,x_2\le 20\\ 20\le x_3,x_4 \le 30
\end{align*}
&lt;/div&gt;
&lt;p&gt;Answer can be easily found by representing the variables as polynomials and multiplying them, i.e.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle [z^{35}](z+z^2+z^3+\cdots +z^{20})^2\, (z^{20}+z^{21}+z^{22}+\cdots +z^{30})^2 = 11
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Hence, there are 11 solutions for the d.e under the constraints.&lt;/p&gt;
&lt;p&gt;In Sage, this can be found by the taylor expansion:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/applications-of-generating-functions/#rest_code_274831f8e7c24005a4bcfd24b69fc75b-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_274831f8e7c24005a4bcfd24b69fc75b-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;taylor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coefficient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;We can even get a closed form if the problem is changed to&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle x_1+x_2+x_3+x_4=n\\ 0\le x_1,x_2, x_3,x_4
\end{align*}
&lt;/div&gt;
&lt;p&gt;The g.f. for this is written as&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle (1+z+z^2+z^3+\cdots)^4=\dfrac{1}{(1-z)^4}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and the nth coeffiecient is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle [z^n]\dfrac{1}{(1-z)^4}=\dbinom{n+3}{3}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;b) Number of ways to make changes for n units using coins of denominations 1,2 and 5 units.
The d.e. for this problem is written as&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle x_1+2\, x_2+5\, x_3=n
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and the g.f. is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle G(z)=\dfrac{1}{(1-z)(1-z^2)(1-z^5)}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The &lt;span class="math"&gt;\(n^{th}\)&lt;/span&gt; coefficient gets the exact answer, but having a g.f. allows us to do more, like having an asymptotic form.
In this case, factor the denominator&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle G(z)=\dfrac{1}{(1-z)^3}\cdot \dfrac{1}{(1+z)(1+z+z^2+z^3+z^4)}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The first part of the two fractions contributes the most to the coefficients, and an approximation can be written as&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle [z^n]G(z)\sim [z^n]\dfrac{1}{(1-z)^3}\cdot \lim_{z\to 1}\dfrac{1}{(1+z)(1+z+z^2+z^3+z^4)} =\dfrac{\dbinom{n+2}{2}}{10}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Comparing the precise and approximate answers:
for &lt;span class="math"&gt;\(n=1000\)&lt;/span&gt;
&lt;span class="math"&gt;\(50401\)&lt;/span&gt; and &lt;span class="math"&gt;\(50150.1\)&lt;/span&gt;,&lt;/p&gt;
&lt;p&gt;for &lt;span class="math"&gt;\(n=2000\)&lt;/span&gt;
200801 and 200301.1,
respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="partial-and-infinite-sums"&gt;
&lt;h2&gt;2 Partial and infinite sums&lt;/h2&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;Finding a closed form for&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \sum_{k=1}^n k
\end{equation*}
&lt;/div&gt;
&lt;p&gt;For problems like this, we can make use of the property of g.f:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle G(z)=\sum_{i\ge 0} a_i\, x^i\\ \implies \dfrac{1}{1-z}G(z)=\sum_{i\ge 0}\left(\sum_{j=0}^i a_j \right)z^i
\end{align*}
&lt;/div&gt;
&lt;p&gt;G.f. for &lt;span class="math"&gt;\(&amp;lt;0,1,2,3,\ldots&amp;gt;\)&lt;/span&gt; is given by&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle G(z)=\dfrac{z}{(1-z)^2}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Hence, to find the sum, it's simply&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle \dfrac{1}{1-z}\, G(z)=\dfrac{z}{(1-z)^3}\\ \implies [z^n]\dfrac{1}{1-z}\, G(z)=\sum_{k=1}^n k = \dbinom{n+1}{2}
\end{align*}
&lt;/div&gt;
&lt;p&gt;We can then proceed to find more complicated sums like&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \sum_{k=1}^n k^2
\end{equation*}
&lt;/div&gt;
&lt;p&gt;which are usually done in high school by mathematical induction, but never shown how to derive in the first place.
To derive it from g.f., we must first find the g.f. for , which can be easily obtained by differentation. i.e.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle z\, \dfrac{d}{dz}\left(\frac{z}{(1-z)^2}\right)=\dfrac{z+z^2}{(1-z)^3}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and the sum of the squares is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle [z^n]\dfrac{z+z^2}{(1-z)^4}=\dbinom{n+2}{3}+\dbinom{n+1}{3}=\dfrac{1}{6} \, {\left(2 \, n + 1\right)} {\left(n + 1\right)} n
\end{equation*}
&lt;/div&gt;
&lt;p&gt;which can be verified by Sage&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/applications-of-generating-functions/#rest_code_02a91665e2b74a7eb103bc8903e361f4-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/applications-of-generating-functions/#rest_code_02a91665e2b74a7eb103bc8903e361f4-2"&gt;2&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_02a91665e2b74a7eb103bc8903e361f4-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_02a91665e2b74a7eb103bc8903e361f4-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ol class="loweralpha simple" start="2"&gt;
&lt;li&gt;Summation of infinite series&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For this purpose, the dummy variable in the g.f. is replaced by a constant to obtain the closed form. E.g.
i)&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \sum_{i\ge 0}\frac{1}{5^i}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;We have the g.f. for &lt;span class="math"&gt;\(&amp;lt; 1,1,1,\ldots &amp;gt;\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle G(z)=\dfrac{1}{1-z}\\ \implies G(1/5)=\dfrac{5}{4}
\end{align*}
&lt;/div&gt;
&lt;ol class="lowerroman simple" start="2"&gt;
&lt;li&gt;We can also solve seemingly complicated sums like&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \sum_{i\ge 0} \dfrac{i^2\, F_i}{12^i}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(F_i\)&lt;/span&gt; is the &lt;span class="math"&gt;\(i^{th}\)&lt;/span&gt; fibonacci term.&lt;/p&gt;
&lt;p&gt;The g.f. for &lt;span class="math"&gt;\(F_i\)&lt;/span&gt; can be shown to be (derived from the linear recurrence relation)&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle G(z)=\dfrac{z}{1-z-z^2}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Next, obtain the g.f. for &lt;span class="math"&gt;\(i^2 F_i\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle G_1(z)= z\, D\left(z\, D\left( \dfrac{z}{1-z-z^2} \right) \right) = \dfrac{z^5 - z^4 + 6\, z^3 + z^2 + z}{(1-z-z^2)^3}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(D\)&lt;/span&gt; is the differential operator &lt;span class="math"&gt;\(d/dz\)&lt;/span&gt; and&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \sum_{i\ge 0} \dfrac{i^2\, F_i}{12^i} = G_1(1/12) = \dfrac{279804}{2248091} \approx 0.124462933217561
\end{equation*}
&lt;/div&gt;
&lt;p&gt;In Sage, it's written as&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/applications-of-generating-functions/#rest_code_4a807756c143417d92e97b53f9475b3e-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_4a807756c143417d92e97b53f9475b3e-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="as-probability-g-f-and-obtain-expected-values"&gt;
&lt;h2&gt;3 As probability g.f. and obtain expected values&lt;/h2&gt;
&lt;p&gt;In probability g.f., the coefficients are the probability of occurance of the value. The p.g.f. for a die with 6 faces numbered 1 to 6 is given by&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle P(x)=\dfrac{x+x^2+x^3+x^4+x^5+x^6}{6}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and the probability of the sums when two dice are thrown&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle P_2(x)=P(x)^2=\frac{1}{36} \, x^{12} + \frac{1}{18} \, x^{11} + \frac{1}{12} \, x^{10} + \frac{1}{9} \, x^{9} + \frac{5}{36} \, x^{8} + \frac{1}{6} \, x^{7} + \frac{5}{36} \, x^{6} + \frac{1}{9} \, x^{5} + \frac{1}{12} \, x^{4} + \frac{1}{18} \, x^{3} + \frac{1}{36} \, x^{2}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and the expected value shown when the die is thrown:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle E_1=P'(1)=\dfrac{7}{2}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and when two dice are thrown:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle E_2=P_2'(1)=\dfrac{7\cdot 2}{2}
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>diophantine equations</category><category>expected value</category><category>generating function</category><category>infinite series</category><category>mathjax</category><category>probability</category><category>sage</category><category>summation</category><guid>https://g-ar.github.io/posts/applications-of-generating-functions/</guid><pubDate>Wed, 19 Mar 2014 15:24:04 GMT</pubDate></item><item><title>Expected number of marbles to be picked till one of the colours are repeated</title><link>https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;There is a bag having 3 red, 3 black, 5 white and 7 green marbles. A marble is randomly picked one after another without replacement till the colour of the picked marble matches with one of the marbles in hand. What is the expected number of marbles we need to pick?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Before trying out the analytical solution, let us get an approximate answer from a simulation.
It's just some tens of characters in J:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_f2dde12605734301b25fba9084910c4b-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_f2dde12605734301b25fba9084910c4b-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_f2dde12605734301b25fba9084910c4b-3"&gt;3&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_f2dde12605734301b25fba9084910c4b-1"&gt;&lt;/a&gt;a=:(3#0 1),(5#2),(7#3)
&lt;a name="rest_code_f2dde12605734301b25fba9084910c4b-2"&gt;&lt;/a&gt;sim =: 3 : '{.1+I.-.~:(5?#a){a'
&lt;a name="rest_code_f2dde12605734301b25fba9084910c4b-3"&gt;&lt;/a&gt;(+/%#)(sim "0) 100000#0 NB. about 3.25279
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;sample size of 5 is chosen by pigeonhole principle.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;~:&lt;/tt&gt; returns 1 for items which are distinct till that position.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-.&lt;/span&gt;&lt;/tt&gt; flips the 1's and 0's.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;I.&lt;/tt&gt; fetches the indices of non-zero items. 1 added since indexing starts from 0.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;{.&lt;/tt&gt; gets the head of the array.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the analytical solution, it can be simply expressed as a recurrence relation:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle f_{a,b,c,d} = \begin{cases} A+B+C+D-(a+b+c+d) &amp;amp; A-a = 2 \lor B-b = 2 \lor C-c = 2 \lor D-d = 2\\ &amp;amp; \\ \dfrac{1}{a+b+c+d}\left(a\cdot f_{a-1,b,c,d} + b\cdot f_{a,b-1,c,d} + c\cdot f_{a,b,c-1,d} + d\cdot f_{a,b,c,d-1}\right) &amp;amp; \text{otherwise} \end{cases}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(A,B,C,D\)&lt;/span&gt; are the initial number of marbles of four colours.&lt;/p&gt;
&lt;p&gt;And it can be directly translated to code.&lt;/p&gt;
&lt;p&gt;In Sage:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_284cd72972bf41a0b620b5f7dc18908f-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_284cd72972bf41a0b620b5f7dc18908f-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_284cd72972bf41a0b620b5f7dc18908f-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_284cd72972bf41a0b620b5f7dc18908f-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_284cd72972bf41a0b620b5f7dc18908f-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_284cd72972bf41a0b620b5f7dc18908f-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_284cd72972bf41a0b620b5f7dc18908f-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_284cd72972bf41a0b620b5f7dc18908f-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_284cd72972bf41a0b620b5f7dc18908f-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_284cd72972bf41a0b620b5f7dc18908f-10"&gt;10&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_284cd72972bf41a0b620b5f7dc18908f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;a name="rest_code_284cd72972bf41a0b620b5f7dc18908f-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;a name="rest_code_284cd72972bf41a0b620b5f7dc18908f-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;a name="rest_code_284cd72972bf41a0b620b5f7dc18908f-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;a name="rest_code_284cd72972bf41a0b620b5f7dc18908f-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_284cd72972bf41a0b620b5f7dc18908f-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_284cd72972bf41a0b620b5f7dc18908f-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_284cd72972bf41a0b620b5f7dc18908f-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_284cd72972bf41a0b620b5f7dc18908f-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_284cd72972bf41a0b620b5f7dc18908f-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# = 3979/1224 and N() for the numerical approximation = 3.25081699346405&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here's an exercise for you to try:&lt;/p&gt;
&lt;p&gt;Repeat the same problem, this time with the replacement of the marbles. What's the expected number of number of picks till you see the same coloured marble again?&lt;/p&gt;
&lt;p&gt;Simulation is easy:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_4e9f71f100ac4b05a52d995746c26ba5-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_4e9f71f100ac4b05a52d995746c26ba5-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/#rest_code_4e9f71f100ac4b05a52d995746c26ba5-3"&gt;3&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_4e9f71f100ac4b05a52d995746c26ba5-1"&gt;&lt;/a&gt;a=:(3#0 1),(5#2),(7#3)
&lt;a name="rest_code_4e9f71f100ac4b05a52d995746c26ba5-2"&gt;&lt;/a&gt;sim =: 3 : '{.1+I.-.~:(?5##a){a'
&lt;a name="rest_code_4e9f71f100ac4b05a52d995746c26ba5-3"&gt;&lt;/a&gt;(+/%#)(sim "0) 100000#0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;In a similar fashion, the recurrence can be modified. (Ans: &lt;span class="math"&gt;\(757/243\)&lt;/span&gt;)&lt;/p&gt;&lt;/div&gt;</description><category>expected value</category><category>J</category><category>mathjax</category><category>recurrence</category><category>sage</category><category>simulation</category><guid>https://g-ar.github.io/posts/expected-number-of-marbles-to-be-picked-till-one-of-the-colours-are-repeated/</guid><pubDate>Tue, 11 Feb 2014 15:08:26 GMT</pubDate></item><item><title>Monte-Carlo simulation for an expected value of cards</title><link>https://g-ar.github.io/posts/monte-carlo-simulation-for-an-expected-value-of-cards/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;Suppose we have a standard deck of 52 cards, and we pick 13 cards randomly and arrange them in a row, what is the expected number of adjacent pairs that are of same suit?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;E.g. in ♠♥♥♣♦♣♣♦♦♣♠♠♣ , there are 4 adjacent pairs that are of same suit. On an average, what would be the expected number of such pairs?&lt;/p&gt;
&lt;p&gt;Newcomers to probability theory would find such a question a bit tricky. In such a situation, using a computer for simulation/enumeration would ease the job. For this problem, enumeration can yield the exact answer, but getting all the combinations is awkward.&lt;/p&gt;
&lt;p&gt;In such cases, simulation is there for our rescue! Even an approximate answer would be sufficient to conjecture a formula.&lt;/p&gt;
&lt;p&gt;For the simulation, we will be using a language called &lt;a class="reference external" href="https://jsoftware.com"&gt;J&lt;/a&gt;. The programs written in J can be very short compared to other well known languages. So, we can focus on the problem at hand instead of the program.&lt;/p&gt;
&lt;p&gt;Let's see how it can be used for our simulation (there can be other ways, here’s my shot):&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulation-for-an-expected-value-of-cards/#rest_code_20738831a5944e41b0c28ffbacde08d4-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulation-for-an-expected-value-of-cards/#rest_code_20738831a5944e41b0c28ffbacde08d4-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/monte-carlo-simulation-for-an-expected-value-of-cards/#rest_code_20738831a5944e41b0c28ffbacde08d4-3"&gt;3&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_20738831a5944e41b0c28ffbacde08d4-1"&gt;&lt;/a&gt;a=:13#(i.4)
&lt;a name="rest_code_20738831a5944e41b0c28ffbacde08d4-2"&gt;&lt;/a&gt;sim=: 3 : '+/2=/\(13?52){a'
&lt;a name="rest_code_20738831a5944e41b0c28ffbacde08d4-3"&gt;&lt;/a&gt;(+/%#)(sim "0) 1000000#0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;That's it, less than 70 characters! It output &lt;span class="math"&gt;\(2.82489\)&lt;/span&gt; for me. When we are proceeding with an analytical method, if we get an answer around &lt;span class="math"&gt;\(2.82\)&lt;/span&gt;, then we can be pretty sure that it's right.&lt;/p&gt;
&lt;p&gt;Some explanation about the program:&lt;/p&gt;
&lt;p&gt;In J, every operation is performed right to left, if no parentheses are provided.
So, if we write &lt;tt class="docutils literal"&gt;2*5+3&lt;/tt&gt;, answer would be &lt;tt class="docutils literal"&gt;16&lt;/tt&gt; and not &lt;tt class="docutils literal"&gt;13&lt;/tt&gt;. No operator precedence here.&lt;/p&gt;
&lt;p&gt;In J terminology, the operators are called verbs. They can be monadic or dyadic. Check the help files for more info.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;i.4&lt;/tt&gt; is array of integers &lt;tt class="docutils literal"&gt;0 1 2 3&lt;/tt&gt;, representing 4 suits. &lt;tt class="docutils literal"&gt;13#&lt;/tt&gt; repeats each element 13 times.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;sim&lt;/tt&gt; is the function for our simulation. Read it right to left. &lt;tt class="docutils literal"&gt;{&lt;/tt&gt; is the verb for indexing.&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(13?52)&lt;/span&gt;&lt;/tt&gt; gets 13 random integers in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;0..51&lt;/span&gt;&lt;/tt&gt; without replacement, to simulate 13 card draws.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;2=/\&lt;/span&gt;&lt;/tt&gt; compares two adjacent values from the selected list, and returns 1 or 0 for true or false, respectively.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;+/&lt;/tt&gt; gives us the sum of the array, which is the total number of pairs with same adjacent suit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;" is a verb for rank. "0 gets atomic values in the rhs, i.e. a million zeros, the rhs is not used in our simulation, it's just for performing the experiment a million times. The outcome of each experiment is then averaged, by using the tacit definition &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(+/%#)&lt;/span&gt;&lt;/tt&gt;. This last line almost always remains the same for any similar kind of simulation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lastly, experiment with different number of picks and observe how answer is changing according to that.&lt;/p&gt;
&lt;p&gt;Now, for the analytical result, the linearity of expectation is used.&lt;/p&gt;
&lt;p&gt;The probability that the card in positions i and i+1 are of the same suit is given by&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \mathbb{P}[c_i=c_{i+1} | c_i \text{ is spade}] = \frac{13}{52}\cdot \frac{12}{51}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and similarly for three other suits. The total probability is then&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \mathbb{P}[c_i=c_{i+1}] = \frac{13}{52}\cdot \frac{12}{51} \times 4 = \frac{4}{17}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This is also the expected number of pairs of the same suit when two cards are picked. We write the expected value as&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \mathbb{E}[c_i=c_{i+1}] = \frac{4}{17}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Hence, by linearity of expectation, when ‘n’ cards are picked, we can expect&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \sum_{i=1}^{n}\mathbb{E}[c_i=c_{i+1}] = \frac{4\, (n-1)}{17}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;adjacent pairs to be of the same suit.&lt;/p&gt;
&lt;p&gt;For &lt;span class="math"&gt;\(n=13\)&lt;/span&gt;, it would be &lt;span class="math"&gt;\(48/17\)&lt;/span&gt;, or &lt;span class="math"&gt;\(2.82352941176471\)&lt;/span&gt; cards, which agrees with the simulation.&lt;/p&gt;&lt;/div&gt;</description><category>expected value</category><category>J</category><category>mathjax</category><category>simulation</category><guid>https://g-ar.github.io/posts/monte-carlo-simulation-for-an-expected-value-of-cards/</guid><pubDate>Sun, 09 Feb 2014 14:47:59 GMT</pubDate></item><item><title>Average Number Of Switch Flips Required To Turn On All The Lights</title><link>https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;Suppose there is an array of lights, initially all turned off, and during each step you randomly select a light and turn it on or off if it's in off or on state, respectively. On an average, how many steps are required to take it to all turned on state?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This can be solved using an absorbing Markov chain, or by using a probability tree diagram.&lt;/p&gt;
&lt;p&gt;In the method using the absorbing Markov chain, the starting state is for all turned off.
It can move to the next state which is for one random light turned on. The probability of moving to that state is 1.&lt;/p&gt;
&lt;p&gt;From state 1, it can go back to state 0 with a probability of &lt;span class="math"&gt;\(\dfrac{1}{n}\)&lt;/span&gt;, or to state 2 with probability of &lt;span class="math"&gt;\(1-\dfrac{1}{n}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;And so on, in the &lt;span class="math"&gt;\((n-1)^{th}\)&lt;/span&gt; state, it can go to the absorbing state n with a probability of &lt;span class="math"&gt;\(\dfrac{1}{n}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;E.g. For &lt;span class="math"&gt;\(n=6\)&lt;/span&gt;, the matrix looks like this:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
A=\left(\begin{array}{rrrrrrr}
0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\[10pt]
\dfrac{1}{6} &amp;amp; 0 &amp;amp; \dfrac{5}{6} &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\[10pt]
0 &amp;amp; \dfrac{1}{3} &amp;amp; 0 &amp;amp; \dfrac{2}{3} &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\[10pt]
0 &amp;amp; 0 &amp;amp; \dfrac{1}{2} &amp;amp; 0 &amp;amp; \dfrac{1}{2} &amp;amp; 0 &amp;amp; 0 \\[10pt]
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \dfrac{2}{3} &amp;amp; 0 &amp;amp; \dfrac{1}{3} &amp;amp; 0 \\[10pt]
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \dfrac{5}{6} &amp;amp; 0 &amp;amp; \dfrac{1}{6} \\[10pt]
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1
\end{array}\right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Thus, the matrix Q is:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
Q=\left(\begin{array}{rrrrrr}
0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\[10pt]
\dfrac{1}{6} &amp;amp; 0 &amp;amp; \dfrac{5}{6} &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\[10pt]
0 &amp;amp; \dfrac{1}{3} &amp;amp; 0 &amp;amp; \dfrac{2}{3} &amp;amp; 0 &amp;amp; 0 \\[10pt]
0 &amp;amp; 0 &amp;amp; \dfrac{1}{2} &amp;amp; 0 &amp;amp; \dfrac{1}{2} &amp;amp; 0 \\[10pt]
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \dfrac{2}{3} &amp;amp; 0 &amp;amp; \dfrac{1}{3} \\[10pt]
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \dfrac{5}{6} &amp;amp; 0
\end{array}\right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;And the Expected number of steps is found from&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
(I-Q)^{-1} = \left(\begin{array}{rrrrrr}
\dfrac{13}{5} &amp;amp; \dfrac{48}{5} &amp;amp; 21 &amp;amp; 26 &amp;amp; 18 &amp;amp; 6 \\[10pt]
\dfrac{8}{5} &amp;amp; \dfrac{48}{5} &amp;amp; 21 &amp;amp; 26 &amp;amp; 18 &amp;amp; 6 \\[10pt]
\dfrac{7}{5} &amp;amp; \dfrac{42}{5} &amp;amp; 21 &amp;amp; 26 &amp;amp; 18 &amp;amp; 6 \\[10pt]
\dfrac{13}{10} &amp;amp; \dfrac{39}{5} &amp;amp; \dfrac{39}{2} &amp;amp; 26 &amp;amp; 18
&amp;amp; 6 \\[10pt]
\dfrac{6}{5} &amp;amp; \dfrac{36}{5} &amp;amp; 18 &amp;amp; 24 &amp;amp; 18 &amp;amp; 6 \\[10pt]
1 &amp;amp; 6 &amp;amp; 15 &amp;amp; 20 &amp;amp; 15 &amp;amp; 6
\end{array}\right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The sum of first row gives the expected time it takes to move from the initial state to the absorbing state, which evaluates to &lt;span class="math"&gt;\(\dfrac{416}{5} = 83.2\)&lt;/span&gt; steps.&lt;/p&gt;
&lt;p&gt;This markov chain can be used also to calculate the probability of being in a certain state after 'k' steps.&lt;/p&gt;
&lt;p&gt;E.g. What is the probability of all 6 lights being turned on after random flipping of switches 8 times?&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
A^8=\left(\begin{array}{rrrrrrr}
\dfrac{169}{4374} &amp;amp; 0 &amp;amp; \dfrac{1105}{2187} &amp;amp; 0 &amp;amp; \dfrac{815}{1944} &amp;amp; 0 &amp;amp; \dfrac{215}{5832} \\[10pt]
0 &amp;amp; \dfrac{2717}{13122} &amp;amp; 0 &amp;amp; \dfrac{16175}{26244} &amp;amp; 0 &amp;amp; \dfrac{815}{5832} &amp;amp; \dfrac{215}{5832} \\[10pt]
\dfrac{221}{6561} &amp;amp; 0 &amp;amp; \dfrac{12487}{26244} &amp;amp; 0 &amp;amp; \dfrac{931}{2187} &amp;amp; 0 &amp;amp; \dfrac{7}{108} \\[10pt]
0 &amp;amp; \dfrac{3235}{17496} &amp;amp; 0 &amp;amp; \dfrac{10381}{17496} &amp;amp; 0 &amp;amp; \dfrac{5003}{34992} &amp;amp; \dfrac{919}{11664} \\[10pt]
\dfrac{163}{5832} &amp;amp; 0 &amp;amp; \dfrac{931}{2187} &amp;amp; 0 &amp;amp; \dfrac{42613}{104976} &amp;amp; 0 &amp;amp; \dfrac{14741}{104976} \\[10pt]
0 &amp;amp; \dfrac{815}{5832} &amp;amp; 0 &amp;amp; \dfrac{25015}{52488} &amp;amp; 0 &amp;amp; \dfrac{12595}{104976} &amp;amp; \dfrac{9227}{34992} \\[10pt]
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1
\end{array}\right)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Answer is &lt;span class="math"&gt;\(A^8[0,6] = \dfrac{215}{5832}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We can construct the markov chain and calculate the expected value in Sagemath (a very promising free CAS) as follows:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_ee2fdf52232a4a879329c8b8385c3220-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_ee2fdf52232a4a879329c8b8385c3220-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_ee2fdf52232a4a879329c8b8385c3220-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_ee2fdf52232a4a879329c8b8385c3220-4"&gt;4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_ee2fdf52232a4a879329c8b8385c3220-5"&gt;5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_ee2fdf52232a4a879329c8b8385c3220-6"&gt;6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_ee2fdf52232a4a879329c8b8385c3220-7"&gt;7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_ee2fdf52232a4a879329c8b8385c3220-8"&gt;8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_ee2fdf52232a4a879329c8b8385c3220-9"&gt;9&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_ee2fdf52232a4a879329c8b8385c3220-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;a name="rest_code_ee2fdf52232a4a879329c8b8385c3220-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a name="rest_code_ee2fdf52232a4a879329c8b8385c3220-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_ee2fdf52232a4a879329c8b8385c3220-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ee2fdf52232a4a879329c8b8385c3220-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
&lt;a name="rest_code_ee2fdf52232a4a879329c8b8385c3220-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
&lt;a name="rest_code_ee2fdf52232a4a879329c8b8385c3220-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_ee2fdf52232a4a879329c8b8385c3220-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ee2fdf52232a4a879329c8b8385c3220-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;identity_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inverse&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;If we want to know only the expected value, we can use the tree method:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="../../images/flip1.png" src="https://g-ar.github.io/images/flip1.png"&gt;
&lt;p class="caption"&gt;Probability tree to calculate expected value&lt;/p&gt;
&lt;/div&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle E_0&amp;amp;=1\cdot(1+E_1) \\
E_1 &amp;amp;= \dfrac{1}{n}\cdot(1+E_0)+\left(1-\dfrac{1}{n}\right)\cdot(1+E_2)\\
E_2 &amp;amp;= \dfrac{2}{n}\cdot(1+E_1)+\left(1-\dfrac{2}{n}\right)\cdot(1+E_3)\\
\vdots \\
E_{n-1} &amp;amp;= \dfrac{n-1}{n}\cdot(1+E_{n-2})+\left(1-\dfrac{n-1}{n}\right)\cdot(1)\\
\end{align*}
&lt;/div&gt;
&lt;p&gt;From the above set of equations, we can derive the following algorithm to calculate the expected value in Sage:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_86ceabe212004aea981a9ced92531450-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_86ceabe212004aea981a9ced92531450-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_86ceabe212004aea981a9ced92531450-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_86ceabe212004aea981a9ced92531450-4"&gt;4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_86ceabe212004aea981a9ced92531450-5"&gt;5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_86ceabe212004aea981a9ced92531450-6"&gt;6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_86ceabe212004aea981a9ced92531450-7"&gt;7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_86ceabe212004aea981a9ced92531450-8"&gt;8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/#rest_code_86ceabe212004aea981a9ced92531450-9"&gt;9&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_86ceabe212004aea981a9ced92531450-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_86ceabe212004aea981a9ced92531450-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;a name="rest_code_86ceabe212004aea981a9ced92531450-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;summ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_86ceabe212004aea981a9ced92531450-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_86ceabe212004aea981a9ced92531450-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86ceabe212004aea981a9ced92531450-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86ceabe212004aea981a9ced92531450-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;
&lt;a name="rest_code_86ceabe212004aea981a9ced92531450-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_86ceabe212004aea981a9ced92531450-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;summ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;As we see, the n is taken to be &lt;span class="math"&gt;\(6\)&lt;/span&gt;, and the answer returned is &lt;span class="math"&gt;\(416/5\)&lt;/span&gt;. The variable name is chosen as 'summ', since sum is a function's name. And, ax indicates a function of x.&lt;/p&gt;
&lt;p&gt;For higher values of n, we get e.g.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n=32:\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\dfrac{20053487665674803216384}{4512611027925}\approx 4443876846.81
\end{equation*}
&lt;/div&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n=64:\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\dfrac{346357890987659686224886668704722715345420288}{18472920064106597929865025} \approx 18749493300771803147.7216833338
\end{equation*}
&lt;/div&gt;&lt;/div&gt;</description><category>expected value</category><category>markov chain</category><category>mathjax</category><category>probability</category><category>sage</category><guid>https://g-ar.github.io/posts/average-number-of-switch-flips-required-to-turn-on-all-the-lights/</guid><pubDate>Sat, 18 Jan 2014 05:21:51 GMT</pubDate></item></channel></rss>