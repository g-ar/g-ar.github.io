<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gopinath A R</title><link>https://g-ar.github.io/</link><description>Some random stuffs -- Programming and Mathematics</description><atom:link type="application/rss+xml" href="https://g-ar.github.io/rss.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 20 Oct 2017 10:14:03 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Generating Music With SageMath And Sonic Pi</title><link>https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;In this post, we will see how to generate music with Python/SageMath and Sonic Pi.
Sonic Pi itself is quite nice to make music, but python is an attractive option due to large number of math libraries written for it.
So, here are the steps:&lt;/p&gt;
&lt;div class="section" id="install-pyosc"&gt;
&lt;h2&gt;1 Install PyOSC&lt;/h2&gt;
&lt;p&gt;Open Sage subshell&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_46720547017c4767ae2565690c581570-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_46720547017c4767ae2565690c581570-1"&gt;&lt;/a&gt;sage -sh
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Install PyOSC library&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_cd11d55c552e41e9b49cd15e279c6b0d-1"&gt;1&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_cd11d55c552e41e9b49cd15e279c6b0d-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;PyOSC&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="run-sonic-pi-and-sync-with-an-osc-url"&gt;
&lt;h2&gt;2 Run Sonic Pi and sync with an OSC URL&lt;/h2&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_5c5f422e4cf44917a543cd93dfc96eee-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_5c5f422e4cf44917a543cd93dfc96eee-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_5c5f422e4cf44917a543cd93dfc96eee-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_5c5f422e4cf44917a543cd93dfc96eee-4"&gt;4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_5c5f422e4cf44917a543cd93dfc96eee-5"&gt;5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_5c5f422e4cf44917a543cd93dfc96eee-6"&gt;6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_5c5f422e4cf44917a543cd93dfc96eee-7"&gt;7&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code ruby"&gt;&lt;a name="rest_code_5c5f422e4cf44917a543cd93dfc96eee-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;use_synth&lt;/span&gt; &lt;span class="ss"&gt;:piano&lt;/span&gt;
&lt;a name="rest_code_5c5f422e4cf44917a543cd93dfc96eee-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_5c5f422e4cf44917a543cd93dfc96eee-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;live_loop&lt;/span&gt; &lt;span class="ss"&gt;:foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;a name="rest_code_5c5f422e4cf44917a543cd93dfc96eee-4"&gt;&lt;/a&gt;  &lt;span class="n"&gt;use_real_time&lt;/span&gt;
&lt;a name="rest_code_5c5f422e4cf44917a543cd93dfc96eee-5"&gt;&lt;/a&gt;  &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="s2"&gt;"/osc/trigger/play"&lt;/span&gt;
&lt;a name="rest_code_5c5f422e4cf44917a543cd93dfc96eee-6"&gt;&lt;/a&gt;  &lt;span class="n"&gt;play_chord&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;a name="rest_code_5c5f422e4cf44917a543cd93dfc96eee-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="pass-messages-to-the-osc-url-and-play-notes"&gt;
&lt;h2&gt;3 Pass messages to the OSC URL and play notes&lt;/h2&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-17"&gt;17&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-18"&gt;18&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/#rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-19"&gt;19&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;OSC&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4559&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OSC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OSCClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OSC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OSCMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-16"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/trigger/play"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# float's not required in python, but throws error in Sage without it&lt;/span&gt;
&lt;a name="rest_code_dabf945cdd314827bd7d8e72bcc6d9b2-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;</description><category>OSC</category><category>python</category><category>sage</category><category>Sonic Pi</category><guid>https://g-ar.github.io/posts/generating-music-with-sagemath-and-sonic-pi/</guid><pubDate>Fri, 20 Oct 2017 09:53:44 GMT</pubDate></item><item><title>Profiling Python Programs</title><link>https://g-ar.github.io/posts/profiling-python-programs/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;Last week, when I was looking up for some info on list comprehensions, one of the pages listed a code something like this&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/profiling-python-programs/#rest_code_689dfec236a54340a10edf79b0d7267a-11"&gt;11&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Access every 3rd element in a list&lt;/span&gt;
&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# filename: access.py&lt;/span&gt;
&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_689dfec236a54340a10edf79b0d7267a-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;and I thought for a moment whether the length will be calculated for each iteration, or will it be called only once? I also thought of an answer that since python code is interpreted, it may not do any peephole optimization, and hence &lt;tt class="docutils literal"&gt;len&lt;/tt&gt; will be called five times. Anyway, wanted to know the command that would quantify every call in the program and found about cProfile module. We simply run the following:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b0185e34db7941a0a0b346a71d70acc5-1"&gt;&lt;/a&gt;python -mcProfile -sncalls access.py
&lt;/pre&gt;&lt;p&gt;which will do the profiling and order by the number of calls&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-1"&gt;&lt;/a&gt;1
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-2"&gt;&lt;/a&gt;1
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-3"&gt;&lt;/a&gt;1
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-4"&gt;&lt;/a&gt;1
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-5"&gt;&lt;/a&gt;         8 function calls in 0.000 seconds
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-7"&gt;&lt;/a&gt;   Ordered by: call count
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-9"&gt;&lt;/a&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-10"&gt;&lt;/a&gt;        5    0.000    0.000    0.000    0.000 {len}
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-11"&gt;&lt;/a&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-12"&gt;&lt;/a&gt;        1    0.000    0.000    0.000    0.000 access.py:2(&amp;lt;module&amp;gt;)
&lt;a name="rest_code_529e8ca7907141f69d643ce3587233ab-13"&gt;&lt;/a&gt;        1    0.000    0.000    0.000    0.000 access.py:2(main)
&lt;/pre&gt;&lt;p&gt;So, will the optimization flag do anything for that?&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_31489ba9944c4dc6b6544245a0617469-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# filename: call_access.py&lt;/span&gt;
&lt;a name="rest_code_31489ba9944c4dc6b6544245a0617469-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;access&lt;/span&gt;
&lt;a name="rest_code_31489ba9944c4dc6b6544245a0617469-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_31489ba9944c4dc6b6544245a0617469-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_31489ba9944c4dc6b6544245a0617469-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;and run&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8d2859ed9d5f41b196dc096a5cdff87c-1"&gt;&lt;/a&gt;python -OO -mcProfile -sncalls call_access.py
&lt;/pre&gt;&lt;p&gt;but the output doesn't change much!&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-1"&gt;&lt;/a&gt;1
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-2"&gt;&lt;/a&gt;1
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-3"&gt;&lt;/a&gt;1
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-4"&gt;&lt;/a&gt;1
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-5"&gt;&lt;/a&gt;         9 function calls in 0.000 seconds
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-7"&gt;&lt;/a&gt;   Ordered by: call count
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-9"&gt;&lt;/a&gt;   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-10"&gt;&lt;/a&gt;        5    0.000    0.000    0.000    0.000 {len}
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-11"&gt;&lt;/a&gt;        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-12"&gt;&lt;/a&gt;        1    0.000    0.000    0.000    0.000 access.py:2(&amp;lt;module&amp;gt;)
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-13"&gt;&lt;/a&gt;        1    0.000    0.000    0.000    0.000 access.py:2(main)
&lt;a name="rest_code_90ded5e383f14d05b26bedd880fbf9ed-14"&gt;&lt;/a&gt;        1    0.000    0.000    0.000    0.000 call_access.py:1(&amp;lt;module&amp;gt;)
&lt;/pre&gt;&lt;p&gt;So, even with the optimization flag, number of calls to &lt;tt class="docutils literal"&gt;len&lt;/tt&gt; remains the same.&lt;/p&gt;
&lt;p&gt;We can verify that the bytecode is executed when we run it by using &lt;tt class="docutils literal"&gt;strace&lt;/tt&gt;. For instance, when I ran command the second time, the relevent part of the &lt;tt class="docutils literal"&gt;strace&lt;/tt&gt; output is below&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_3fa79c9281544a6ea6ccd43a189fd66e-1"&gt;&lt;/a&gt;open("access.py", O_RDONLY)             = 3
&lt;a name="rest_code_3fa79c9281544a6ea6ccd43a189fd66e-2"&gt;&lt;/a&gt;fstat(3, {st_mode=S_IFREG|0644, st_size=172, ...}) = 0
&lt;a name="rest_code_3fa79c9281544a6ea6ccd43a189fd66e-3"&gt;&lt;/a&gt;open("access.pyo", O_RDONLY)            = 4
&lt;a name="rest_code_3fa79c9281544a6ea6ccd43a189fd66e-4"&gt;&lt;/a&gt;fstat(4, {st_mode=S_IFREG|0644, st_size=389, ...}) = 0
&lt;a name="rest_code_3fa79c9281544a6ea6ccd43a189fd66e-5"&gt;&lt;/a&gt;read(4, "\3\363\r\nC\252}Xc\0\0\0\0\0\0\0\0\2\0\0\0@\0\0\0s#\0\0\0d\0"..., 4096) = 389
&lt;a name="rest_code_3fa79c9281544a6ea6ccd43a189fd66e-6"&gt;&lt;/a&gt;fstat(4, {st_mode=S_IFREG|0644, st_size=389, ...}) = 0
&lt;a name="rest_code_3fa79c9281544a6ea6ccd43a189fd66e-7"&gt;&lt;/a&gt;read(4, "", 4096)                       = 0
&lt;a name="rest_code_3fa79c9281544a6ea6ccd43a189fd66e-8"&gt;&lt;/a&gt;close(4)                                = 0
&lt;a name="rest_code_3fa79c9281544a6ea6ccd43a189fd66e-9"&gt;&lt;/a&gt;close(3)
&lt;/pre&gt;&lt;p&gt;It did not read access.py again, but it read access.pyo instead. As long as the source is not modified, python reads the bytecode to execute instead of the source (the bytecode stores the modification time of its source code)&lt;/p&gt;
&lt;p&gt;Anyway, we need not do any of these analyses to know whether the bytecode has any code optimization in it. The python docs straight away answers with the following point&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A program doesn't run any faster when it is read from a .pyc or .pyo file than when it is read from a .py file; the only thing that's faster about .pyc or .pyo files is the speed with which they are loaded. (&lt;a class="reference external" href="https://docs.python.org/2/tutorial/modules.html"&gt;docs&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>python</category><category>strace</category><guid>https://g-ar.github.io/posts/profiling-python-programs/</guid><pubDate>Tue, 17 Jan 2017 12:26:38 GMT</pubDate></item><item><title>Getting Started With Emacs</title><link>https://g-ar.github.io/posts/getting-started-with-emacs/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;Emacs is an editor that lets us to edit quickly, avoid boring repetitive typing, define custom commands and bind them to desired keys etc. Plus many of its key bindings work in bash too, so, it's really worth to have some time familiarizing with this ancient editor. Let's take a look about the various key bindings and modes --&lt;/p&gt;
&lt;div class="section" id="a-little-cheat-sheet"&gt;
&lt;h2&gt;A little cheat sheet&lt;/h2&gt;
&lt;p&gt;First, some of the common commands. C means ctrl key, and M means alt key:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="17%"&gt;
&lt;col width="83%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;strong&gt;Key&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;C-e&lt;/td&gt;
&lt;td&gt;Go to end of line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-a&lt;/td&gt;
&lt;td&gt;Go to beginning of line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-t&lt;/td&gt;
&lt;td&gt;Swap adjacent characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-t&lt;/td&gt;
&lt;td&gt;Swap adjacent words&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x t&lt;/td&gt;
&lt;td&gt;transpose two lines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x k&lt;/td&gt;
&lt;td&gt;kill current buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-&amp;lt;space&amp;gt;&lt;/td&gt;
&lt;td&gt;Mark beginning of region, move cursor to highlight&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-%&lt;/td&gt;
&lt;td&gt;replace in region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-s&lt;/td&gt;
&lt;td&gt;forward search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-r&lt;/td&gt;
&lt;td&gt;reverse search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-&amp;lt;&lt;/td&gt;
&lt;td&gt;Go to beginning of buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-&amp;gt;&lt;/td&gt;
&lt;td&gt;Go to end&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x h&lt;/td&gt;
&lt;td&gt;Whole buffer's selected as region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;f3&lt;/td&gt;
&lt;td&gt;Start recording macro&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;f4&lt;/td&gt;
&lt;td&gt;stop recording macro (press f4 to play that macro)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-u&lt;/td&gt;
&lt;td&gt;Convert the word after the cursor to uppercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-l&lt;/td&gt;
&lt;td&gt;Convert to lower case&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-c&lt;/td&gt;
&lt;td&gt;Capitalize word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-=&lt;/td&gt;
&lt;td&gt;Count lines, words, and characters in region&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are thousands of commands, which can be invoked by M-x and entering the command name, in case we don't remember the key binding for the command. C-h can be used to find help.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="org-mode"&gt;
&lt;h2&gt;Org-mode&lt;/h2&gt;
&lt;p&gt;If anybody has to be instantly impressed by Emacs, this will do it! It's more like a markup language, which can export to several formats like html, LaTeX, rst, plaintext etc., and it's much easier to use than formats like rst. We can even use it to create tables, and apply formulas on them like a spreadsheet. How cool is that, spreadsheet without any of its associated bloat?!&lt;/p&gt;
&lt;p&gt;See org-mode's site for its excellent documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ido-mode"&gt;
&lt;h2&gt;Ido-mode&lt;/h2&gt;
&lt;p&gt;This provides suggestions when entering the command after M-x, which is quite helpful in discovering commands when we vaguely remember the command, or even a new command. And it searches for substrings which needn't be continuous, e.g. pressing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;M-x&lt;/span&gt; areg&lt;/tt&gt; will highlight align-regexp&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="yasnippet"&gt;
&lt;h2&gt;Yasnippet&lt;/h2&gt;
&lt;p&gt;This is a mode where for a given minor-mode and a keyword in that mode, on pressing tab, it expands to the code snippet as stored. E.g. Open a blank C file, type &lt;tt class="docutils literal"&gt;main&lt;/tt&gt;, then hit TAB, it gets expanded to&lt;/p&gt;
&lt;pre class="code C"&gt;&lt;a name="rest_code_e96a1b5cf8724f4f80e4274d9eb553a7-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_e96a1b5cf8724f4f80e4274d9eb553a7-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_e96a1b5cf8724f4f80e4274d9eb553a7-3"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;a name="rest_code_e96a1b5cf8724f4f80e4274d9eb553a7-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e96a1b5cf8724f4f80e4274d9eb553a7-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_e96a1b5cf8724f4f80e4274d9eb553a7-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_e96a1b5cf8724f4f80e4274d9eb553a7-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="auto-complete-mode"&gt;
&lt;h2&gt;Auto-complete mode&lt;/h2&gt;
&lt;p&gt;Provides suggestions to complete the words, showing frequently typed words on top.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jedi-with-python-mode"&gt;
&lt;h2&gt;Jedi with python mode&lt;/h2&gt;
&lt;p&gt;With python mode, jedi is useful for autocompletion and code navigation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="restclient-mode"&gt;
&lt;h2&gt;Restclient-mode&lt;/h2&gt;
&lt;p&gt;This is indispensable when developing web APIs.
Type the method, endpoint, headers, message, and C-c C-c, and a nicely formatted response will be shown in an adjacent window! The requests can be stored in a file, separted by &lt;tt class="docutils literal"&gt;#&lt;/tt&gt; as a delimiter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expand-region"&gt;
&lt;h2&gt;Expand-region&lt;/h2&gt;
&lt;p&gt;Expands the region based on semantic units
E.g. in a word "a-string", when the cursor is at 'a', when &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-=&lt;/span&gt;&lt;/tt&gt; is pressed once, 'a' is selected, on pressing again 'a-string' is selected, pressing again selects '"a-string"'. Very useful when we need to copy or delete a block of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tiny"&gt;
&lt;h2&gt;Tiny&lt;/h2&gt;
&lt;p&gt;Tiny is not yasnippet, is another one, which can expand a given sentence with required numerical range.
E.g. Construct the ascii table! Press &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;M-x&lt;/span&gt; &lt;span class="pre"&gt;tiny-expand&lt;/span&gt;&lt;/tt&gt; after entering
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;m97\n122|%03d&lt;/span&gt; %(string x)&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-1"&gt;&lt;/a&gt;097 a
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-2"&gt;&lt;/a&gt;098 b
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-3"&gt;&lt;/a&gt;099 c
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-4"&gt;&lt;/a&gt;100 d
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-5"&gt;&lt;/a&gt;101 e
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-6"&gt;&lt;/a&gt;102 f
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-7"&gt;&lt;/a&gt;103 g
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-8"&gt;&lt;/a&gt;104 h
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-9"&gt;&lt;/a&gt;105 i
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-10"&gt;&lt;/a&gt;106 j
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-11"&gt;&lt;/a&gt;107 k
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-12"&gt;&lt;/a&gt;108 l
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-13"&gt;&lt;/a&gt;109 m
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-14"&gt;&lt;/a&gt;110 n
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-15"&gt;&lt;/a&gt;111 o
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-16"&gt;&lt;/a&gt;112 p
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-17"&gt;&lt;/a&gt;113 q
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-18"&gt;&lt;/a&gt;114 r
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-19"&gt;&lt;/a&gt;115 s
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-20"&gt;&lt;/a&gt;116 t
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-21"&gt;&lt;/a&gt;117 u
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-22"&gt;&lt;/a&gt;118 v
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-23"&gt;&lt;/a&gt;119 w
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-24"&gt;&lt;/a&gt;120 x
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-25"&gt;&lt;/a&gt;121 y
&lt;a name="rest_code_2101ff9b8d3a467598782accde823fda-26"&gt;&lt;/a&gt;122 z
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="rainbow-delimiters-mode"&gt;
&lt;h2&gt;Rainbow-delimiters-mode&lt;/h2&gt;
&lt;p&gt;This is useful for languages where brackets are used to identify blocks, like lisp, C etc. This mode marks each block level's parentheses with  different colors, so that it becomes easy to figure out any missing parenthesis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="artist-mode"&gt;
&lt;h2&gt;Artist-mode&lt;/h2&gt;
&lt;p&gt;Want to make some ascii-art? There's a mode for that as well!
Enter &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;M-x&lt;/span&gt; &lt;span class="pre"&gt;artist-mode&lt;/span&gt;&lt;/tt&gt;, and then we can easily create rectangle, ellipse, polygons etc. in the text file.
If we want to draw with a mouse in the emacs GUI, press &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;shift-&amp;lt;mouse-2&amp;gt;&lt;/span&gt;&lt;/tt&gt; (middle click), which shows the menu of options to draw like rectangle, ellipse, pen, spray-can etc. Very handy if we want to draw simple block diagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="calc-mode"&gt;
&lt;h2&gt;Calc-mode&lt;/h2&gt;
&lt;p&gt;This is a stack-based scientific calculator which performs many of the calculations. It's a mini CAS!
To start it, enter &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;M-x&lt;/span&gt; calc&lt;/tt&gt;, and as an example, we can do unit conversions, by typing in the calc window:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_9358c08583eb4f0d95865d48e0cdced8-1"&gt;&lt;/a&gt;1
&lt;a name="rest_code_9358c08583eb4f0d95865d48e0cdced8-2"&gt;&lt;/a&gt;u c
&lt;a name="rest_code_9358c08583eb4f0d95865d48e0cdced8-3"&gt;&lt;/a&gt;day
&lt;a name="rest_code_9358c08583eb4f0d95865d48e0cdced8-4"&gt;&lt;/a&gt;s
&lt;/pre&gt;&lt;p&gt;will return 86400, which means 86400 seconds are there in a day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="replace-regexp"&gt;
&lt;h2&gt;Replace-Regexp&lt;/h2&gt;
&lt;p&gt;This is a function, which can be used to replace words using regular expressions. E.g. consider a text file consisting of comma delimited values like&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_38be84b8b4e0427db1e615b2faa80d23-1"&gt;&lt;/a&gt;12,11
&lt;a name="rest_code_38be84b8b4e0427db1e615b2faa80d23-2"&gt;&lt;/a&gt;1,33
&lt;a name="rest_code_38be84b8b4e0427db1e615b2faa80d23-3"&gt;&lt;/a&gt;54,77
&lt;a name="rest_code_38be84b8b4e0427db1e615b2faa80d23-4"&gt;&lt;/a&gt;99,101
&lt;/pre&gt;&lt;p&gt;Now, we can use regular expressions to swap the numbers in each row using the following steps:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_61ff2b45503446f69516e044c58ed43a-1"&gt;&lt;/a&gt;- Select the region
&lt;a name="rest_code_61ff2b45503446f69516e044c58ed43a-2"&gt;&lt;/a&gt;- M-x replace-regexp
&lt;a name="rest_code_61ff2b45503446f69516e044c58ed43a-3"&gt;&lt;/a&gt;- Replace regexp:\([0-9]+\),\([0-9]+\)
&lt;a name="rest_code_61ff2b45503446f69516e044c58ed43a-4"&gt;&lt;/a&gt;- Replace regexp \([0-9]+\),\([0-9]+\) with:\2,\1
&lt;/pre&gt;&lt;p&gt;And we get the result&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_40ffe5e4b4144563b3b4c4a527957ff8-1"&gt;&lt;/a&gt;11,12
&lt;a name="rest_code_40ffe5e4b4144563b3b4c4a527957ff8-2"&gt;&lt;/a&gt;33,1
&lt;a name="rest_code_40ffe5e4b4144563b3b4c4a527957ff8-3"&gt;&lt;/a&gt;77,54
&lt;a name="rest_code_40ffe5e4b4144563b3b4c4a527957ff8-4"&gt;&lt;/a&gt;101,99
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="align-regexp"&gt;
&lt;h2&gt;Align-Regexp&lt;/h2&gt;
&lt;p&gt;This is another useful function to beautify our text. E.g. if we have the following snippet:&lt;/p&gt;
&lt;pre class="code C"&gt;&lt;a name="rest_code_00acfea00e614390a61ae2c4a235a47a-1"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_00acfea00e614390a61ae2c4a235a47a-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_00acfea00e614390a61ae2c4a235a47a-3"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cubed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Running &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;M-x&lt;/span&gt; &lt;span class="pre"&gt;align-regexp&lt;/span&gt; =&lt;/tt&gt; aligns with &lt;tt class="docutils literal"&gt;=&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code C"&gt;&lt;a name="rest_code_3774d34298924253bf00ede110c01874-1"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_3774d34298924253bf00ede110c01874-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_3774d34298924253bf00ede110c01874-3"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cubed&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And there are many more modes and commands, which make editing fun!&lt;/p&gt;
&lt;p&gt;For a detailed reference:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/refcards/ps/refcard.ps.gz"&gt;Emacs reference card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://orgmode.org/"&gt;Org mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://masteringemacs.org/article/introduction-to-ido-mode"&gt;Ido mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.emacswiki.org/emacs/Yasnippet"&gt;yasnippet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/auto-complete/auto-complete"&gt;auto-complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://tkf.github.io/emacs-jedi/latest/"&gt;Jedi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pashky/restclient.el"&gt;Restclient-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/magnars/expand-region.el"&gt;Expand-region&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://elpa.gnu.org/packages/tiny.html"&gt;Tiny&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Fanael/rainbow-delimiters"&gt;Rainbow-delimiters-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/calc.html"&gt;Calc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or get help within emacs, by pressing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-h&lt;/span&gt; m&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://g-ar.github.io/posts/getting-started-with-emacs/</guid><pubDate>Sun, 25 Dec 2016 06:22:17 GMT</pubDate></item><item><title>Simulating Mouse Movement To Draw In Mypaint</title><link>https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;Wouldn't it be nice if we can command where to move the mouse pointer and press buttons, and then use the functionality to draw in a painting program? We can do exactly that in systems running &lt;tt class="docutils literal"&gt;xorg&lt;/tt&gt; display server, by using &lt;tt class="docutils literal"&gt;xdotool&lt;/tt&gt; to simulate mouse and keyboard.&lt;/p&gt;
&lt;p&gt;E.g. to draw a simple 5 petal rose, &lt;span class="math"&gt;\(r = \cos \left(5 \theta\right)\)&lt;/span&gt;,&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_f49d0909586549cfa3879b2151903b11-14"&gt;14&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1920&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;xh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sleep 2; xdotool mousemove '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;yh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yh&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;th&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yh&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;yh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'xdotool mousedown 1 mousemove '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;' mouseup 1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f49d0909586549cfa3879b2151903b11-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sleep 0.01'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Below is the result of running the script with &lt;tt class="docutils literal"&gt;mypaint&lt;/tt&gt; opened in fullscreen mode. Various effects can be achieved by selecting one among the hundreds of brushes available.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="../../images/mypaint1.png" src="https://g-ar.github.io/images/mypaint1.png"&gt;
&lt;p class="caption"&gt;Result of 08-micro felt pen and glow pen by running the script twice&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Next is another example with a pencil style chosen for the brush.&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/#rest_code_23393107d5314ce8baf1dffb181315e8-14"&gt;14&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;xh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sleep 2; xdotool mousemove '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yh&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;yh&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;yh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;yh&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'xdotool mousedown 1 mousemove '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;' mouseup 1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_23393107d5314ce8baf1dffb181315e8-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sleep 0.01'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="figure"&gt;
&lt;img alt="../../images/mypaint2.png" src="https://g-ar.github.io/images/mypaint2.png"&gt;
&lt;p class="caption"&gt;Result of running the script with pencil&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Interesting, yes?&lt;/p&gt;&lt;/div&gt;</description><category>computer art</category><category>mathjax</category><category>mypaint</category><category>python</category><category>xdotool</category><category>xorg</category><guid>https://g-ar.github.io/posts/simulating-mouse-movement-to-draw-in-mypaint/</guid><pubDate>Sat, 24 Sep 2016 10:08:43 GMT</pubDate></item><item><title>Using integer relation algorithms to guess closed forms</title><link>https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;In this post, we'll see about guessing closed forms of the answers obtained by numerical methods.
In particular, we'll use the excellent math toolkit by David Bailey et. al. aimed at experimental mathematics -- &lt;a class="reference external" href="http://crd.lbl.gov/~dhbailey/mpdist/arprec-2.2.18.tar.gz"&gt;arprec&lt;/a&gt;.
Compile and run mathtool.&lt;/p&gt;
&lt;p&gt;The following problems are taken from &lt;a class="reference external" href="https://brilliant.org"&gt;Brilliant&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;div class="first math"&gt;
\begin{equation*}
\displaystyle \int_0^{\frac{\pi}{3}} x \left(\ln{\left(2 \sin{\frac{x}{2}}\right)}\right)^2 \, dx = \frac{c\, \pi^a}{b}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Find $a, b,$ and &lt;span class="math"&gt;\(c\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Start mathtool, and enter the commands in sequence:
(Only the relevent output is shown after command executions)&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_1ef1568e630c4e2584f1535e36c9de9b-16"&gt;16&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-1"&gt;&lt;/a&gt;integrate[x*log[2*sin[x/2]]^2,{x,0,pi/3}]
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-2"&gt;&lt;/a&gt;-- snip --
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-3"&gt;&lt;/a&gt;&amp;gt; 0.25554854129290762855238976168333131037737175253636607542005616591624
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-4"&gt;&lt;/a&gt;epsilon=-50
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-5"&gt;&lt;/a&gt;pslq[0.25554854129290762855238976168333131037737175253636607542005616591624, table[pi^i,{i,2,4}]]
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-6"&gt;&lt;/a&gt;-- snip --
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-7"&gt;&lt;/a&gt;&amp;gt; Relation:  0 =
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-8"&gt;&lt;/a&gt;&amp;gt; +  6480.* pslq001
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-9"&gt;&lt;/a&gt;&amp;gt; +     0.* pslq002
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-10"&gt;&lt;/a&gt;&amp;gt; +     0.* pslq003
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-11"&gt;&lt;/a&gt;&amp;gt; +   -17.* pslq004
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-12"&gt;&lt;/a&gt;&amp;gt; Result[ 37] through Result[ 40] =
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-13"&gt;&lt;/a&gt;&amp;gt;      6480.00000000000000000000000000000000000000000000000000000000000000000000
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-14"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-15"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;a name="rest_code_1ef1568e630c4e2584f1535e36c9de9b-16"&gt;&lt;/a&gt;&amp;gt;       -17.00000000000000000000000000000000000000000000000000000000000000000000
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;So, the above output means, &lt;span class="math"&gt;\(0= 6480\times 0.255548541292907628552389761683331310377371752536366075420056165916 - 17\times \pi^4\)&lt;/span&gt;, and hence &lt;span class="math"&gt;\(c=17, a=4, b=6480\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;When doing such computations, it's good to have more digits when computing integral or sums, and reduce the epsilon value when using pslq, so that it checks for fewer decimal places when trying for an integer relation. Otherwise, it is likely to miss the relation when the numerical accuracy is kept high. digits=100 and epsilon=-50 worked well for me in most cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first math"&gt;
\begin{equation*}
\displaystyle \int_0^{2\log{\phi}} \log{\left(2\, \sinh{\frac{x}{2}}\right)} = -\frac{\pi^a}{b}
\end{equation*}
&lt;/div&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_5d2034e793124ab6b266626cf6e922a1-17"&gt;17&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-1"&gt;&lt;/a&gt;epsilon=-100
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-2"&gt;&lt;/a&gt;integrate[log[2*(exp[x/2]-exp[-x/2])/2],{x,1e-100,2*log[(1+sqrt[5])/2]}]
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-3"&gt;&lt;/a&gt;&amp;gt; -0.98696044010893586188344909998761511353136994072407906264133493762200
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-4"&gt;&lt;/a&gt;epsilon=-50
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-5"&gt;&lt;/a&gt;pslq[-0.98696044010893586188344909998761511353136994072407906264133493762200, table[pi^i,{i,1,4}]]
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-6"&gt;&lt;/a&gt;&amp;gt; Relation:  0 =
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-7"&gt;&lt;/a&gt;&amp;gt; +  10.* pslq001
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-8"&gt;&lt;/a&gt;&amp;gt; +   0.* pslq002
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-9"&gt;&lt;/a&gt;&amp;gt; +   1.* pslq003
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-10"&gt;&lt;/a&gt;&amp;gt; +   0.* pslq004
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-11"&gt;&lt;/a&gt;&amp;gt; +   0.* pslq005
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-12"&gt;&lt;/a&gt;&amp;gt; Result[ 29] through Result[ 33] =
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-13"&gt;&lt;/a&gt;&amp;gt;        10.00000000000000000000000000000000000000000000000000000000000000000000
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-14"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-15"&gt;&lt;/a&gt;&amp;gt;         1.00000000000000000000000000000000000000000000000000000000000000000000
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-16"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;a name="rest_code_5d2034e793124ab6b266626cf6e922a1-17"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;In this example, mathtool chokes when lower limit is 0 saying argument is too large, so keep it close to 0. Then using pslq, we see that a=2 and b=10.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first math"&gt;
\begin{equation*}
\displaystyle \int_{-\infty}^{\infty} \dfrac{\log{\left(1 + e^{2x}\right)}}{1 + e^{3\, x}} = \frac{a \pi^b}{c}
\end{equation*}
&lt;/div&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_ccf427cfc5054f3889ef2f1267bc8d27-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_ccf427cfc5054f3889ef2f1267bc8d27-2"&gt;2&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_ccf427cfc5054f3889ef2f1267bc8d27-1"&gt;&lt;/a&gt;epsilon=-100
&lt;a name="rest_code_ccf427cfc5054f3889ef2f1267bc8d27-2"&gt;&lt;/a&gt;Integrate[Log[1 + Exp[2*x]]/(1 + Exp[3* x]), {x, -Infinity, Infinity}]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;If we try to execute it directly, it complains "argument too large". So, we transform it by substituting &lt;span class="math"&gt;\(e^x=y\)&lt;/span&gt;&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-17"&gt;17&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-18"&gt;18&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-1"&gt;&lt;/a&gt;Integrate[Log[1 + y^2]/(1 + y^3)/y, {y, 0, Infinity}]
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-2"&gt;&lt;/a&gt;&amp;gt; 0.59400396858408176872614992128884242944017635321356610251561824949472
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-3"&gt;&lt;/a&gt;epsilon=-50
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-4"&gt;&lt;/a&gt;pslq[0.59400396858408176872614992128884242944017635321356610251561824949472,table[pi^i,{i,1,5}]]
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-5"&gt;&lt;/a&gt;&amp;gt; Relation:  0 =
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-6"&gt;&lt;/a&gt;&amp;gt; +  216.* pslq001
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-7"&gt;&lt;/a&gt;&amp;gt; +    0.* pslq002
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-8"&gt;&lt;/a&gt;&amp;gt; +  -13.* pslq003
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-9"&gt;&lt;/a&gt;&amp;gt; +    0.* pslq004
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-10"&gt;&lt;/a&gt;&amp;gt; +    0.* pslq005
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-11"&gt;&lt;/a&gt;&amp;gt; +    0.* pslq006
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-12"&gt;&lt;/a&gt;&amp;gt; Result[  7] through Result[ 12] =
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-13"&gt;&lt;/a&gt;&amp;gt;       216.00000000000000000000000000000000000000000000000000000000000000000000
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-14"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-15"&gt;&lt;/a&gt;&amp;gt;       -13.00000000000000000000000000000000000000000000000000000000000000000000
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-16"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-17"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;a name="rest_code_c0cc2693297b4271a73c8a1ebfc48e3a-18"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Hence, &lt;span class="math"&gt;\(a=13, b=2, c=216\)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first math"&gt;
\begin{equation*}
\displaystyle \int_0^1 \log{x}\log{\left(1-x\right)} dx = \frac{a}{b}-\frac{\pi^c}{d}
\end{equation*}
&lt;/div&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-17"&gt;17&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-18"&gt;18&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-19"&gt;19&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-20"&gt;20&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/#rest_code_bcab2efc52204729b877f4821c05f2b6-21"&gt;21&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-1"&gt;&lt;/a&gt;epsilon=-100
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-2"&gt;&lt;/a&gt;integrate[log[x]*log[1-x],{x,0,1}]
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-3"&gt;&lt;/a&gt;&amp;gt; 0.35506593315177356352758483335397481078105009879320156226444177062999
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-4"&gt;&lt;/a&gt;epsilon=-50
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-5"&gt;&lt;/a&gt;pslq[0.35506593315177356352758483335397481078105009879320156226444177062999, 1,table[pi^i,{i,1,5}]]
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-6"&gt;&lt;/a&gt;&amp;gt; Relation:  0 =
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-7"&gt;&lt;/a&gt;&amp;gt; +  -6.* pslq001
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-8"&gt;&lt;/a&gt;&amp;gt; +  12.* pslq002
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-9"&gt;&lt;/a&gt;&amp;gt; +   0.* pslq003
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-10"&gt;&lt;/a&gt;&amp;gt; +  -1.* pslq004
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-11"&gt;&lt;/a&gt;&amp;gt; +   0.* pslq005
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-12"&gt;&lt;/a&gt;&amp;gt; +   0.* pslq006
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-13"&gt;&lt;/a&gt;&amp;gt; +   0.* pslq007
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-14"&gt;&lt;/a&gt;&amp;gt; Result[ 27] through Result[ 33] =
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-15"&gt;&lt;/a&gt;&amp;gt;        -6.00000000000000000000000000000000000000000000000000000000000000000000
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-16"&gt;&lt;/a&gt;&amp;gt;        12.00000000000000000000000000000000000000000000000000000000000000000000
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-17"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-18"&gt;&lt;/a&gt;&amp;gt;        -1.00000000000000000000000000000000000000000000000000000000000000000000
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-19"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-20"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;a name="rest_code_bcab2efc52204729b877f4821c05f2b6-21"&gt;&lt;/a&gt;&amp;gt;       0.00000000000000000000000000000000000000000000000000000000000000000000e0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Therefore, &lt;span class="math"&gt;\(a=2, b=1, c=2, d=6\)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>experiment math</category><category>integration</category><category>mathjax</category><category>pslq</category><guid>https://g-ar.github.io/posts/using-integer-relation-algorithms-to-guess-closed-forms/</guid><pubDate>Sat, 02 Jul 2016 14:21:29 GMT</pubDate></item><item><title>Compiling softwares that require later versions of GCC</title><link>https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;Suppose we require to install the latest version of a software, but the repository doesn't have it, we usually either get the latest source code and compile, or download the compiled binary if available, and run it. But if we are running some old distro, latest binary refuse to run complaining that it requires GLIBC 2.16 to run etc. When the binary file refuses to run, we can then try to compile the source, which usually works fine. But sometimes it happens that the source requires a language standard, which is unsupported by the GCC version installed. In such cases, we can download the latest GCC, compile it, and then compile the required software using the latest GCC. We'll see an example to compile "Context Free" -- a program which generates art from a context free grammar, and requires C++11 standard to compile. The steps mentioned below were done on debian wheezy, whose software repository contains version 2 of cfdg whereas the latest version is 3.&lt;/p&gt;
&lt;p&gt;In order to compile the latest version of contextfree in debian wheezy:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Download the latest GCC&lt;/li&gt;
&lt;li&gt;Extract and configure with a prefix path, so that we can avoid installing it to a directory which requires root privilege&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;./configure &lt;span class="pre"&gt;--prefix=$HOME/bin/custom_gcc&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;The compile and install to that path, the whole process takes much time anywhere between 10 mins to a couple of hours or more, depending on the speed of the machine and the number of cores used.
To compile on a single core, use&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;make&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;make install&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After GCC is installed, we need to indicate in the makefile of contextfree to use that version of GCC. So, add the following lines to the makefile, install &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;libpng12-dev&lt;/span&gt;&lt;/tt&gt; and compile.&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/#rest_code_4a439989ed3f40cba91b70f6aba9eec3-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/#rest_code_4a439989ed3f40cba91b70f6aba9eec3-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/#rest_code_4a439989ed3f40cba91b70f6aba9eec3-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/#rest_code_4a439989ed3f40cba91b70f6aba9eec3-4"&gt;4&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_4a439989ed3f40cba91b70f6aba9eec3-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;HOME&lt;span class="k"&gt;)&lt;/span&gt;/bin/gcc_custom/bin/gcc
&lt;a name="rest_code_4a439989ed3f40cba91b70f6aba9eec3-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;HOME&lt;span class="k"&gt;)&lt;/span&gt;/bin/gcc_custom/bin/gcc
&lt;a name="rest_code_4a439989ed3f40cba91b70f6aba9eec3-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;CPP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;HOME&lt;span class="k"&gt;)&lt;/span&gt;/bin/gcc_custom/bin/g++
&lt;a name="rest_code_4a439989ed3f40cba91b70f6aba9eec3-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;CXX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;HOME&lt;span class="k"&gt;)&lt;/span&gt;/bin/gcc_custom/bin/g++
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The output cfdg can then be used as a standalone file. But we need to export some paths to run it, otherwise it'll complain about the older libraries. To get around that, we can create a small bash script to export the compiler and library paths and then run cfdg. E.g. create a script in &lt;tt class="docutils literal"&gt;$HOME/bin&lt;/tt&gt; named cfdg with following contents&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/#rest_code_771aa223acc64cedbd2edfb738af2fd8-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/#rest_code_771aa223acc64cedbd2edfb738af2fd8-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/#rest_code_771aa223acc64cedbd2edfb738af2fd8-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/#rest_code_771aa223acc64cedbd2edfb738af2fd8-4"&gt;4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/#rest_code_771aa223acc64cedbd2edfb738af2fd8-5"&gt;5&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_771aa223acc64cedbd2edfb738af2fd8-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;a name="rest_code_771aa223acc64cedbd2edfb738af2fd8-2"&gt;&lt;/a&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin/gcc_custom/bin/gcc
&lt;a name="rest_code_771aa223acc64cedbd2edfb738af2fd8-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CXX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin/gcc_custom/bin/g++
&lt;a name="rest_code_771aa223acc64cedbd2edfb738af2fd8-4"&gt;&lt;/a&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin/gcc_custom/lib64
&lt;a name="rest_code_771aa223acc64cedbd2edfb738af2fd8-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin/context-free-3.0.9/cfdg &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;and &lt;tt class="docutils literal"&gt;chmod +x cfdg&lt;/tt&gt;, and have fun with the software!&lt;/p&gt;&lt;/div&gt;</description><category>computer art</category><category>context free art</category><category>debian</category><category>GCC</category><category>linux</category><category>mathjax</category><guid>https://g-ar.github.io/posts/compiling-softwares-that-require-later-versions-of-gcc/</guid><pubDate>Sun, 20 Dec 2015 14:10:01 GMT</pubDate></item><item><title>Installing and Running TensorFlow in Debian Wheezy</title><link>https://g-ar.github.io/posts/installing-and-running-tensorflow-in-debian-wheezy/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;A couple of days ago google released what they term it as the second generation deep learning neural network software system, called TensorFlow. Google has been taking much interest in deep learning since two or three years (perhaps having surplus computation power?), and they are using it for all sorts of softwares they develop &lt;span class="math"&gt;\(-\)&lt;/span&gt; maps, translation, spying on you for targeted ads etc. So, I thought of trying out their newly released tool.&lt;/p&gt;
&lt;p&gt;First, I tried to install it using their "easy way" using &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;. Getting into the virtual environment is easy, and pip install command also worked, but when importing tensorflow, it spit an ugly ImportError &lt;span class="math"&gt;\(-\)&lt;/span&gt; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/lib/x86_64-linux-gnu/libc.so.6:&lt;/span&gt; version `GLIBC_2.17' not found&lt;/tt&gt;. Now, for the other option.&lt;/p&gt;
&lt;p&gt;Next, I thought installing from sources would definitely go well. Downloaded all the source codes and dependencies required by the project, and bazel was one of them. Downloaded bazel as well, but when the installation script was run, that method also went kaput with some error complaining about the kernel version or something. Running from a virtual machine or installing some latest distro was my only option, I thought. But no! There's another method using docker image, which I overlooked even though that was mentioned at the top of the installation page.&lt;/p&gt;
&lt;p&gt;Here are the steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Docker runs only on 64-bit OS with kernel version 3.10 or higher. So, the first step must be to install the latest kernel available from wheezy backports. Follow the backport instructions&lt;/li&gt;
&lt;li&gt;Then reboot the machine selecting the latest kernel version&lt;/li&gt;
&lt;li&gt;Follow the docker installation steps&lt;/li&gt;
&lt;li&gt;Now, we are all set to install TensorFlow. Simply run&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;sudo docker run &lt;span class="pre"&gt;-it&lt;/span&gt; b.gcr.io/tensorflow/tensorflow&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;That will pull all the required dependencies and set the docker image (which was about 300MiB to download)&lt;/li&gt;
&lt;li&gt;Wouldn't it be convenient if we could add some data persistance, to save data so that the host could use it? There's an option for that as well&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;sudo docker run &lt;span class="pre"&gt;-it&lt;/span&gt; &lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;/host/dir:/docker/dir&lt;/span&gt; b.gcr.io/tensorflow/tensorflow&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Now the &lt;tt class="docutils literal"&gt;/host/dir&lt;/tt&gt; is mounted to the &lt;tt class="docutils literal"&gt;/docker/dir&lt;/tt&gt; when the image is run&lt;/li&gt;
&lt;li&gt;And that's it, no need of a virtualbox, which wastes more time and space than to run a docker image&lt;/li&gt;
&lt;li&gt;Check an example program from the tutorial, like plotting mandelbrot set&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>debian</category><category>docker</category><category>linux</category><category>mathjax</category><category>tensorflow</category><guid>https://g-ar.github.io/posts/installing-and-running-tensorflow-in-debian-wheezy/</guid><pubDate>Wed, 11 Nov 2015 11:46:08 GMT</pubDate></item><item><title>Deriving Explicit Formulas from Markov Chains</title><link>https://g-ar.github.io/posts/deriving-explicit-formulas-from-markov-chains/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;Once we formulate the markov model correctly, we can obtain the generating function for each entry in the matrix, where there's a possibility of getting the explicit formula. Let's take a look at one such problem:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A six faced unbiased die is rolled :math:`n` times. What is the probability that we get to see all the six numbers in the sequence?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Setting up a markov chain is easy:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle A= \begin{pmatrix} 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\ 0 &amp;amp; \frac{1}{6} &amp;amp; \frac{5}{6} &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\ 0 &amp;amp; 0 &amp;amp; \frac{1}{3} &amp;amp; \frac{2}{3} &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \frac{1}{2} &amp;amp; \frac{1}{2} &amp;amp; 0 &amp;amp; 0\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \frac{2}{3} &amp;amp; \frac{1}{3} &amp;amp; 0\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \frac{5}{6} &amp;amp; \frac{1}{6}\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \end{pmatrix}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The states indicate the number of faces shown up. E.g. the row above the last row indicates that when 5 faces are seen, there's a probability of &lt;span class="math"&gt;\(5/6\)&lt;/span&gt; remaining in the same state and &lt;span class="math"&gt;\(1/6\)&lt;/span&gt; moving to the final state.&lt;/p&gt;
&lt;p&gt;So, &lt;span class="math"&gt;\(A^n[0,6]\)&lt;/span&gt;, gives the required answer. But we can also find the generating function for that entry by computing &lt;span class="math"&gt;\((I-x\, A)^{-1}\)&lt;/span&gt;, which is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle G(x) = \frac{10 \, x^{6}}{{\left(5 \, x - 6\right)} {\left(2 \, x - 3\right)} {\left(x - 1\right)} {\left(x - 2\right)} {\left(x - 3\right)} {\left(x - 6\right)}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and on partial fractions it's&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle G(x) = \frac{36}{5 \, x - 6} - \frac{45}{2 \, x - 3} - \frac{1}{x - 1} + \frac{40}{x - 2} - \frac{45}{x - 3} + \frac{36}{x - 6} + 1
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and the probability can be written by extracting &lt;span class="math"&gt;\([x^n]G(x)\)&lt;/span&gt; as&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\displaystyle \mathbb{P}(n) = 1-\frac{6}{6^n}+\frac{15}{3^n}-\frac{20}{2^n}+15\left(\frac{2}{3}\right)^n-6\left(\frac{5}{6}\right)^n
\end{equation*}
&lt;/div&gt;
&lt;p&gt;which can be verified by a simulation in J:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/deriving-explicit-formulas-from-markov-chains/#rest_code_5bc587da7fee4bda8fdfaa68720a66f6-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/deriving-explicit-formulas-from-markov-chains/#rest_code_5bc587da7fee4bda8fdfaa68720a66f6-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/deriving-explicit-formulas-from-markov-chains/#rest_code_5bc587da7fee4bda8fdfaa68720a66f6-3"&gt;3&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_5bc587da7fee4bda8fdfaa68720a66f6-1"&gt;&lt;/a&gt;n=:10
&lt;a name="rest_code_5bc587da7fee4bda8fdfaa68720a66f6-2"&gt;&lt;/a&gt;sim=: 3 : '6=+/~:?n#6'
&lt;a name="rest_code_5bc587da7fee4bda8fdfaa68720a66f6-3"&gt;&lt;/a&gt;(+/%#)(sim"0)1e5#0 NB. about 0.27
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\mathbb{P}(10) = \dfrac{38045}{139968} \approx 0.271812128486511
\end{equation*}
&lt;/div&gt;&lt;/div&gt;</description><category>generating function</category><category>J</category><category>markov chain</category><category>mathjax</category><category>sage</category><category>simulation</category><guid>https://g-ar.github.io/posts/deriving-explicit-formulas-from-markov-chains/</guid><pubDate>Sun, 09 Aug 2015 11:41:29 GMT</pubDate></item><item><title>Multisets and multivariate generating functions</title><link>https://g-ar.github.io/posts/multisets-and-multivariate-generating-functions/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;Consider a multiset, &lt;span class="math"&gt;\(S = \{11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15\}\)&lt;/span&gt;.
&lt;em&gt;How many combinations of 8 elements can be made from the set so that the sum of those 8 elements is equal to 105, when the numbers are picked without replacement?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here, if the sum is not asked, the problem can be solved using an ordinary generating function as&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G(x) = (1+x+x^2+x^3+x^4)^2\, (1+x+x^2+x^3+x^4+x^5)\, (1+x+x^2+x^3+x^4+x^5+x^6)\, (1+x+x^2+x^3)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and finding &lt;span class="math"&gt;\([x^8]G(x)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;But when the sum is also there as a constraint, we require one more variable to keep track of the sum. So, we may use &lt;span class="math"&gt;\(x\)&lt;/span&gt; to know the number of elements chosen, and &lt;span class="math"&gt;\(y\)&lt;/span&gt; for the sum of those numbers. Hence, the required bivariate generating function can be written as&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
G(x,y) = {\left(x^{6} y^{84} + x^{5} y^{70} + x^{4} y^{56} + x^{3} y^{42} + x^{2} y^{28} + x y^{14} + 1\right)}\\ {\left(x^{5} y^{65} + x^{4} y^{52} + x^{3} y^{39} + x^{2} y^{26} + x y^{13} + 1\right)} {\left(x^{4} y^{48} + x^{3} y^{36} + x^{2} y^{24} + x y^{12} + 1\right)}\\ {\left(x^{4} y^{44} + x^{3} y^{33} + x^{2} y^{22} + x y^{11} + 1\right)} {\left(x^{3} y^{45} + x^{2} y^{30} + x y^{15} + 1\right)}
\end{align*}
&lt;/div&gt;
&lt;p&gt;Now, the answer to the question would be &lt;span class="math"&gt;\([x^8 y^{105}] G(x,y)\)&lt;/span&gt; in the expansion of the product.&lt;/p&gt;
&lt;p&gt;If the question was to find the number of combinations with replacement, the generating function can be represented as&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
G(x,y) = \dfrac{1}{\left(1-x\, y^{11}\right)\left(1-x\, y^{12}\right)\left(1-x\, y^{13}\right)\left(1-x\, y^{14}\right)\left(1-x\, y^{15}\right)}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Now, let us focus our attention to a related probability problem:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;From the multiset S, what is the probability of choosing 8 elements such that the sum of those 8 elements is equal to 105, when the numbers are picked without replacement?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This looks simple and we may be tempted to say that the answer is &lt;span class="math"&gt;\([x^8 y^{105}]G(x,y) / [x^8] G(x)\)&lt;/span&gt;, but note that some combinations of numbers are more probable to be picked since the number of each element are not the same. E.g. If the set contains &lt;span class="math"&gt;\(\{11, 11, 12\}\)&lt;/span&gt;, the probability of choosing &lt;span class="math"&gt;\(\{11, 11\}\)&lt;/span&gt; will be more than the probability of choosing &lt;span class="math"&gt;\(\{11, 12\}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, it can still be solved using a generating function:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
P(x,y) = \left(1+\binom{4}{1}\, (x\, y^{11})^{1}+\binom{4}{2}\, (x\, y^{11})^{2}+\binom{4}{3}\, (x\, y^{11})^{3}+\binom{4}{4}\, (x\, y^{11})^{4}\right)\\ \left(1+\binom{4}{1}\, (x\, y^{12})^{1}+\binom{4}{2}\, (x\, y^{12})^{2}+\binom{4}{3}\, (x\, y^{12})^{3}+\binom{4}{4}\, (x\, y^{12})^{4}\right)\\ \left(1+\binom{5}{1}\, (x\, y^{13})^{1}+\binom{5}{2}\, (x\, y^{13})^{2}+\binom{5}{3}\, (x\, y^{13})^{3}+\binom{5}{4}\, (x\, y^{13})^{4}+\binom{5}{5}\, (x\, y^{13})^{5}\right)\\ \left(1+\binom{6}{1}\, (x\, y^{14})^{1}+\binom{6}{2}\, (x\, y^{14})^{2}+\binom{6}{3}\, (x\, y^{14})^{3}+\binom{6}{4}\, (x\, y^{14})^{4}+\binom{6}{5}\, (x\, y^{14})^{5}+\binom{6}{6}\, (x\, y^{14})^{6}\right)\\ \left(1+\binom{3}{1}\, (x\, y^{15})^{1}+\binom{3}{2}\, (x\, y^{15})^{2}+\binom{3}{3}\, (x\, y^{15})^{3}\right)
\end{align*}
&lt;/div&gt;
&lt;p&gt;and the required probability is&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\mathbb{P} = \dfrac{[x^8 y^{105}] P(x,y)}{\dbinom{22}{8}} = \dfrac{343}{2805} \approx 0.122281639928699
\end{equation*}
&lt;/div&gt;
&lt;p&gt;And what is the probability if we do it with replacement? In this case, the probability can be found by using an exponential generating function, which is written as:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
E(x,y) = e^{x\, \left(4\, y^{11}+4\, y^{12}+5\, y^{13}+6\, y^{14}+3\, y^{15} \right)}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;and the probability is given by &lt;span class="math"&gt;\([x^8 y^{105}]E(x,y)\dfrac{8!}{22^8} = \dfrac{5621995920}{22^8} \approx 0.102449319851133\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The above probabilities can also be verified by monte-carlo simulations in J, for the without replacement case:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/multisets-and-multivariate-generating-functions/#rest_code_d75623fc6e524e02a8bb2f4e424cff4c-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/multisets-and-multivariate-generating-functions/#rest_code_d75623fc6e524e02a8bb2f4e424cff4c-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/multisets-and-multivariate-generating-functions/#rest_code_d75623fc6e524e02a8bb2f4e424cff4c-3"&gt;3&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_d75623fc6e524e02a8bb2f4e424cff4c-1"&gt;&lt;/a&gt;lst=:(4#11,12),(5#13),(6#14),3#15
&lt;a name="rest_code_d75623fc6e524e02a8bb2f4e424cff4c-2"&gt;&lt;/a&gt;sim=: 3 : '105=+/(8?#lst){lst'
&lt;a name="rest_code_d75623fc6e524e02a8bb2f4e424cff4c-3"&gt;&lt;/a&gt;(+/%#)(sim"0)1e5#0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;and for the with replacement case:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/multisets-and-multivariate-generating-functions/#rest_code_933a62bd93c247b797fac2f0bdeb1739-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/multisets-and-multivariate-generating-functions/#rest_code_933a62bd93c247b797fac2f0bdeb1739-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/multisets-and-multivariate-generating-functions/#rest_code_933a62bd93c247b797fac2f0bdeb1739-3"&gt;3&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_933a62bd93c247b797fac2f0bdeb1739-1"&gt;&lt;/a&gt;lst=:(4#11,12),(5#13),(6#14),3#15
&lt;a name="rest_code_933a62bd93c247b797fac2f0bdeb1739-2"&gt;&lt;/a&gt;sim=: 3 : '105=+/(?8##lst){lst'
&lt;a name="rest_code_933a62bd93c247b797fac2f0bdeb1739-3"&gt;&lt;/a&gt;(+/%#)(sim"0)1e5#0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</description><category>generating function</category><category>J</category><category>mathjax</category><category>multiset</category><category>simulation</category><guid>https://g-ar.github.io/posts/multisets-and-multivariate-generating-functions/</guid><pubDate>Fri, 03 Jul 2015 11:30:24 GMT</pubDate></item><item><title>Getting started with experimental mathematics</title><link>https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/</link><dc:creator>Gopinath</dc:creator><description>&lt;div&gt;&lt;p&gt;Here is one &lt;a class="reference external" href="https://math.stackexchange.com/questions/1061083/average-time-to-fill-boxes-with-balls/"&gt;nice problem&lt;/a&gt; to describe how arrive at a formula experimentally.&lt;/p&gt;
&lt;p&gt;To rephrase the problem:&lt;/p&gt;
&lt;p&gt;There are &lt;span class="math"&gt;\(m\)&lt;/span&gt; people with one ball each, and &lt;span class="math"&gt;\(n\)&lt;/span&gt; boxes. In a round, each of them picks one box randomly (uniformly and independently) and
drops the ball in it. Whichever box is not empty is removed, and the next round starts. How many rounds, on an average, will it take till no
boxes are left?&lt;/p&gt;
&lt;p&gt;Obtaining a formula directly by combinatorial arguments without computing any values and getting it right is quite difficult, and prone to errors.&lt;/p&gt;
&lt;p&gt;So, let us obtain it experimentally.&lt;/p&gt;
&lt;p&gt;What does experimental math involve?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Brute force through the problem&lt;ul&gt;
&lt;li&gt;Write a program which describes the problem&lt;/li&gt;
&lt;li&gt;obtain the first few values&lt;/li&gt;
&lt;li&gt;take it to either oeis or a sequence guessing routine&lt;/li&gt;
&lt;li&gt;Then we may be able to find a formula&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If it's a problem on probability, do a simulation to cross verify with the formula&lt;/li&gt;
&lt;li&gt;Having a lot of fun, doing both math and programming at the same time!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Back to our problem, how many rounds can we expect for the game to last? Let us do the simulation by computing answers for small values, in J:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_d070e927cd2748638b7bba45b5002b40-12"&gt;12&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-1"&gt;&lt;/a&gt;   'm n'=:5 3
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-2"&gt;&lt;/a&gt;   sim=: 3 : 0
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-3"&gt;&lt;/a&gt;a=:m
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-4"&gt;&lt;/a&gt;c=:0
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-5"&gt;&lt;/a&gt;while. (a&amp;gt;0) do.
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-6"&gt;&lt;/a&gt;b=:+/~:?n#a
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-7"&gt;&lt;/a&gt;a=:a-b
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-8"&gt;&lt;/a&gt;c=:c+1
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-9"&gt;&lt;/a&gt;end.
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-10"&gt;&lt;/a&gt;c return.
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-11"&gt;&lt;/a&gt;)
&lt;a name="rest_code_d070e927cd2748638b7bba45b5002b40-12"&gt;&lt;/a&gt;   (+/%#)(sim"0)1e5#0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Running the above gives a value of about &lt;span class="math"&gt;\(2.554\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Next, we will try to compute some numbers:
How many ways is it possible for 3 balls to be placed 5 boxes such that everybody chooses the same box?&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(abc,0,0,0,0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(= 5\)&lt;/span&gt; ways&lt;/p&gt;
&lt;p&gt;How many ways is it possible for 3 balls to be placed 5 boxes such that two boxes are selected?&lt;/p&gt;
&lt;p&gt;Do some casework:&lt;/p&gt;
&lt;p&gt;One box may contain two balls, one box with one ball and one empty box.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(ab,c,0,0,0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(ac,b,0,0,0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(bc,a,0,0,0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(= 3\cdot 5!/3! = 60\)&lt;/span&gt; ways&lt;/p&gt;
&lt;p&gt;How many ways is it possible for 3 balls to be placed 5 boxes such that 3 boxes are selected?&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(a,b,c,0,0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(= 5!/2! = 60\)&lt;/span&gt; ways&lt;/p&gt;
&lt;p&gt;And we see that the total turns out to be &lt;span class="math"&gt;\(5 + 60 + 60 = 125\)&lt;/span&gt;, which is 53, the number of ways of arranging the balls in boxes without any restriction.&lt;/p&gt;
&lt;p&gt;To calculate the expected value, we have&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
E[n] = p_1 * E[n-1] + p_2 * E[n-2] + \cdots + p_m * E[n-m]
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(p_m\)&lt;/span&gt; means the probability of choosing &lt;span class="math"&gt;\(m\)&lt;/span&gt; different boxes from &lt;span class="math"&gt;\(n\)&lt;/span&gt; boxes.&lt;/p&gt;
&lt;p&gt;For &lt;span class="math"&gt;\(m=3\)&lt;/span&gt; and &lt;span class="math"&gt;\(n=5\)&lt;/span&gt;, &lt;span class="math"&gt;\(E[5] = 5/125*E[4]+60/125*E[3]+60/125*E[2] + 1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Then, calculate similarly for &lt;span class="math"&gt;\(n=4\)&lt;/span&gt; and &lt;span class="math"&gt;\(m=3\)&lt;/span&gt; to get &lt;span class="math"&gt;\(E[4]\)&lt;/span&gt; and so on.
The boundary condition is &lt;span class="math"&gt;\(E[1]=1\)&lt;/span&gt;, since obviously the game would end in one round if there was a single box.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(E[5]\)&lt;/span&gt; would be &lt;span class="math"&gt;\(\dfrac{18391}{7200} = 2.5543\)&lt;/span&gt; which is close to the simulation. Hence, we can proceed with our experimentation for conjecturing a formula.&lt;/p&gt;
&lt;p&gt;Let us calculate the number of ways to partition a number &lt;span class="math"&gt;\(n\)&lt;/span&gt; of length &lt;span class="math"&gt;\(3\)&lt;/span&gt; (number of people fixed at &lt;span class="math"&gt;\(m=3\)&lt;/span&gt;), using sage:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-1"&gt; 1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-2"&gt; 2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-3"&gt; 3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-4"&gt; 4&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-5"&gt; 5&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-6"&gt; 6&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-7"&gt; 7&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-8"&gt; 8&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-9"&gt; 9&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-10"&gt;10&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-11"&gt;11&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-12"&gt;12&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-13"&gt;13&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-14"&gt;14&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-15"&gt;15&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-16"&gt;16&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_945816477d1440d2880a526e386ee92c-17"&gt;17&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;afun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aa&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;nbac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;ll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;summ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;alst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Partitions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ll&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;tot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-11"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;tot&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;binomial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-13"&gt;&lt;/a&gt;            &lt;span class="n"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;summ&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cardinality&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tot&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nbac&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;summ&lt;/span&gt;
&lt;a name="rest_code_945816477d1440d2880a526e386ee92c-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;afun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;What this function afun does is that for &lt;span class="math"&gt;\(n\)&lt;/span&gt; and &lt;span class="math"&gt;\(m\)&lt;/span&gt;, it computes the number of partitions having length &lt;span class="math"&gt;\(l (\le m)\)&lt;/span&gt;, and we compute the list of values for &lt;span class="math"&gt;\(l=m=3\)&lt;/span&gt; and varying &lt;span class="math"&gt;\(n\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Insert that list to oeis, and bingo! The second answer shown looks promising: &lt;span class="math"&gt;\(A(k,3)\)&lt;/span&gt; where &lt;span class="math"&gt;\(A(k,n)= \sum_{m=1}^k (-1)^{m+1}\cdot \binom{n}{m} \cdot m^k\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It seems to be related to the stirling numbers of the second kind.&lt;/p&gt;
&lt;p&gt;After some trial and error, the equation turns out to be:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
\displaystyle E_{n,m} &amp;amp;= \left(\sum_{j=1}^{n-1} \left\lbrace {m \atop j} \right\rbrace \dfrac{n!}{(n-j)!} \dfrac{E_{n-j,m}}{n^m}\right)+1\\
E_{1,m} &amp;amp;= 1
\end{align*}
&lt;/div&gt;
&lt;p&gt;In maxima (which will cache the values to speed up recurrence computation), it can be written as:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3cf932bd29314196939067df2859ef5a-1"&gt;1&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3cf932bd29314196939067df2859ef5a-2"&gt;2&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3cf932bd29314196939067df2859ef5a-3"&gt;3&lt;/a&gt;
&lt;a href="https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/#rest_code_3cf932bd29314196939067df2859ef5a-4"&gt;4&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code scheme"&gt;&lt;a name="rest_code_3cf932bd29314196939067df2859ef5a-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;m:3$&lt;/span&gt;
&lt;a name="rest_code_3cf932bd29314196939067df2859ef5a-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;:1$&lt;/span&gt;
&lt;a name="rest_code_3cf932bd29314196939067df2859ef5a-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;:=sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stirling2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;m,j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;*factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;/factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n-j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;*E&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n-j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;/n^m,j,1,n-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;+1$&lt;/span&gt;
&lt;a name="rest_code_3cf932bd29314196939067df2859ef5a-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;E&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</description><category>expected value</category><category>experimental mathematics</category><category>J</category><category>mathjax</category><category>recurrence</category><category>sage</category><category>simulation</category><guid>https://g-ar.github.io/posts/getting-started-with-experimental-mathematics/</guid><pubDate>Tue, 16 Dec 2014 11:17:39 GMT</pubDate></item></channel></rss>